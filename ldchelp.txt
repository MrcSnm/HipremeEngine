OVERVIEW: LDC - the LLVM D compiler

USAGE: ldc2 [options] files --run Runs the resulting program, passing the remaining arguments to it

OPTIONS:

General options:

  -D                                          - Generate documentation
  --Dd=<directory>                            - Write documentation file to <directory>
  --Df=<filename>                             - Write documentation file to <filename>
  -H                                          - Generate 'header' file
  --HC                                        - Generate C++ 'header' file
  --HCd=<directory>                           - Write C++ 'header' file to <directory>
  --HCf=<filename>                            - Write C++ 'header' file to <filename>
  --Hd=<directory>                            - Write 'header' file to <directory>
  --Hf=<filename>                             - Write 'header' file to <filename>
  --Hkeep-all-bodies                          - Keep all function bodies in .di files
  -I=<directory>                              - Look for imports also in <directory>
  -J=<directory>                              - Look for string imports also in <directory>
  Setting the optimization level:
      -O                                        - Equivalent to -O3
      --O0                                       - No optimizations (default)
      --O1                                       - Simple optimizations
      --O2                                       - Good optimizations
      --O3                                       - Aggressive optimizations
      --O4                                       - Equivalent to -O3
      --O5                                       - Equivalent to -O3
      --Os                                       - Like -O2 with extra optimizations for size
      --Oz                                       - Like -Os but reduces code size further
  -X                                          - Generate JSON file
  --Xf=<filename>                             - Write JSON file to <filename>
  --allinst                                   - Generate code for all template instantiations
  --betterC                                   - Omit generating some runtime information and helper functions
  --boundscheck=<value>                       - Array bounds check
    =off                                      -   Disabled
    =safeonly                                 -   Enabled for @safe functions only
    =on                                       -   Enabled for all functions
  -c                                          - Compile only, do not link
  --cache=<cache dir>                         - Enable compilation cache, using <cache dir> to store cache files (experimental)
  --cache-prune                               - Enable cache pruning.
  --cache-prune-expiration=<dur>              - Sets the pruning expiration time of cache files to <dur> seconds (default: 1 week). Implies -cache-prune.
  --cache-prune-interval=<dur>                - Sets the cache pruning interval to <dur> seconds (default: 20 min). Set to 0 to force pruning. Implies -cache-prune.
  --cache-prune-maxbytes=<size>               - Sets the maximum cache size to <size> bytes. Implies -cache-prune.
  --cache-prune-maxpercentage=<perc>          - Sets the cache size limit to <perc> percent of the available space (default: 75%). Implies -cache-prune.
  --cache-retrieval=<value>                   - Set the cache retrieval mechanism (default: copy).
    =copy                                     -   Make a copy of the cache file
    =hardlink                                 -   Create a hard link to the cache file (recommended)
    =link                                     -   Equal to 'hardlink' on Windows, but 'symlink' on Unix and OS X
    =symlink                                  -   Create a symbolic link to the cache file
  --check-printf-calls                        - Validate printf call format strings against arguments
  --checkaction=<value>                       - Action to take when an assert/boundscheck/final-switch fails
    =D                                        -   Usual D behavior of throwing an AssertError
    =C                                        -   Call the C runtime library assert failure function
    =halt                                     -   Halt the program execution (very lightweight)
    =context                                  -   Use D assert with context information (when available)
  --conf=<filename>                           - Use configuration file <filename>
  --cov=<value>                               - Compile-in code coverage analysis
                                                (use -cov=n for n% minimum required coverage)
  Allow deprecated language features and symbols:
      -d                                        - Silently allow deprecated features and symbols
      --dw                                       - Issue a message when deprecated features or symbols are used (default)
      --de                                       - Issue an error when deprecated features or symbols are used (halt compilation)
  --d-debug=<level/idents>                    - Compile in debug code >= <level> or identified by <idents>
  --d-version=<level/idents>                  - Compile in version code >= <level> or identified by <idents>
  --deps=<filename>                           - Write module dependencies to filename (only imports). '-deps' alone prints module dependencies (imports/file/version/debug/lib)
  --enable-asserts=<value>                    - (*) Enable assertions
  --enable-color=<value>                      - (*) Force colored console output
  --disable-d-passes                          - Disable all D-specific passes
  --disable-gc2stack                          - Disable promotion of GC allocations to stack memory
  --enable-invariants=<value>                 - (*) Enable invariants
  --disable-loop-unrolling                    - Disable loop unrolling in all relevant passes
  --disable-loop-vectorization                - Disable the loop vectorization pass
  --disable-red-zone                          - Do not emit code that uses the red zone.
  --disable-simplify-drtcalls                 - Disable simplification of druntime calls
  --disable-simplify-libcalls                 - Disable simplification of well-known C runtime calls
  --disable-slp-vectorization                 - Disable the slp vectorization pass
  --dwarf-version=<int>                       - Dwarf version
  --enable-contracts=<value>                  - (*) Enable function pre- and post-conditions
  --enable-dynamic-compile                    - Enable dynamic compilation
  --enable-inlining=<value>                   - (*) Enable function inlining (default in -O2 and higher)
  --enable-postconditions=<value>             - (*) Enable function postconditions
  --enable-preconditions=<value>              - (*) Enable function preconditions
  --enable-switch-errors=<value>              - (*) Enable runtime errors for unhandled switch cases
  --extern-std=<value>                        - C++ standard for name mangling compatibility
    =c++98                                    -   Sets `__traits(getTargetInfo, "cppStd")` to `199711`
    =c++11                                    -   Sets `__traits(getTargetInfo, "cppStd")` to `201103`
    =c++14                                    -   Sets `__traits(getTargetInfo, "cppStd")` to `201402`
    =c++17                                    -   Sets `__traits(getTargetInfo, "cppStd")` to `201703`
  --fdmd-trace-functions                      - DMD-style runtime performance profiling of generated code
  --ffast-math                                - Set @fastmath for all functions.
  --finstrument-functions                     - Instrument function entry and exit with GCC-compatible profiling calls
  --float-abi=<value>                         - ABI/operations to use for floating-point types:
    =default                                  -   Target default floating-point ABI
    =soft                                     -   Software floating-point ABI and operations
    =softfp                                   -   Soft-float ABI, but hardware floating-point instructions
    =hard                                     -   Hardware floating-point ABI and instructions
  --flto=<value>                              - Set LTO mode, requires linker support
    =full                                     -   Merges all input into a single module
    =thin                                     -   Parallel importing and codegen (faster than 'full')
  --flto-binary=<file>                        - Set the linker LTO plugin library file (e.g. LLVMgold.so (Unixes) or libLTO.dylib (Darwin))
  --fno-plt                                   - Do not use the PLT to make function calls
  --fp-contract=<value>                       - Enable aggressive formation of fused FP ops
    =fast                                     -   Fuse FP ops whenever profitable
    =on                                       -   Only fuse 'blessed' FP ops.
    =off                                      -   Only fuse FP ops when the result won't be affected.
  --fprofile-generate=<filename>              - Generate instrumented code to collect a runtime profile into default.profraw (overriden by '=<filename>' or LLVM_PROFILE_FILE env var)
  --fprofile-instr-generate=<filename>        - Generate instrumented code to collect a runtime profile into default.profraw (overriden by '=<filename>' or LLVM_PROFILE_FILE env var)
  --fprofile-instr-use=<filename>             - Use instrumentation data for profile-guided optimization
  --fprofile-use=<filename>                   - Use instrumentation data for profile-guided optimization
  --frame-pointer=<value>                     - Specify frame pointer elimination optimization
    =all                                      -   Disable frame pointer elimination
    =non-leaf                                 -   Disable frame pointer elimination for non-leaf frame
    =none                                     -   Enable frame pointer elimination
  --fsanitize=<checks>                        - Turn on runtime checks for various forms of undefined or suspicious behavior.
  --fsanitize-blacklist=<file>                - Add <file> to the blacklist files for the sanitizers.
  --fsanitize-coverage=<type>                 - Specify the type of coverage instrumentation for -fsanitize
  --fsave-optimization-record=<filename>      - Generate a YAML optimization record file of optimizations performed by LLVM
  --fthread-model=<value>                     - Thread model
    =global-dynamic                           -   Global dynamic TLS model (default)
    =local-dynamic                            -   Local dynamic TLS model
    =initial-exec                             -   Initial exec TLS model
    =local-exec                               -   Local exec TLS model
  --fvisibility=<value>                       - Default visibility of symbols (not relevant for Windows)
    =default                                  -   Export all symbols
    =hidden                                   -   Only export symbols marked with 'export'
  --fxray-instruction-threshold=<value>       - Sets the minimum function size to instrument with XRay
  --fxray-instrument                          - Generate XRay instrumentation sleds on function entry and exit
  Generating debug information:
      -g                                        - Add symbolic debug info
      --gc                                       - Add symbolic debug info, optimize for non D debuggers
      --gline-tables-only                        - Add line tables only
  --hash-threshold=<uint>                     - Hash symbol names longer than this threshold (experimental)
  -i=<pattern>                                - Include imported modules in the compilation
  --ignore                                    - Ignore unsupported pragmas
  --lib                                       - Create static library
  --linkonce-templates                        - Use linkonce_odr linkage for template symbols instead of weak_odr
  --lowmem                                    - Enable the garbage collector for the LDC front-end. This reduces the compiler memory requirements but increases compile times.
  --m32                                       - 32 bit target
  --m64                                       - 64 bit target
  --main                                      - Add default main() (e.g. for unittesting)
  --march=<string>                            - Architecture to generate code for (see --version)
  --mattr=<a1,+a2,-a3,...>                    - Target specific attributes (-mattr=help for details)
  --mcpu=<cpu-name>                           - Target a specific cpu type (-mcpu=help for details)
  --mdcompute-file-prefix=<prefix>            - Prefix to prepend to the generated kernel files.
  --mdcompute-targets=<targets>               - Generates code for the specified DCompute target list. Use 'ocl-xy0' for OpenCL x.y, and 'cuda-xy0' for CUDA CC x.y
  --mixin=<filename>                          - Expand and save mixins to <filename>
  --mlir-elide-elementsattrs-if-larger=<uint> - Elide ElementsAttrs with "..." that have more elements than the given upper limit
  --mlir-pretty-debuginfo                     - Print pretty debug info in MLIR output
  --mlir-print-debuginfo                      - Print debug info in MLIR output
  --mlir-print-op-on-diagnostic               - When a diagnostic is emitted on an operation, also print the operation as an attached note
  --mlir-print-stacktrace-on-diagnostic       - When a diagnostic is emitted, also print the stack trace as an attached note
  --mtriple=<string>                          - Override target triple
  --mv=<<package.module>=<filespec>>          - Use <filespec> as source file for <package.module>
  --noasm                                     - Disallow use of inline assembler
  --nogc                                      - Do not allow code that generates implicit garbage collector calls
  --o-                                        - Do not write object file
  --od=<directory>                            - Write object files to <directory>
  --of=<filename>                             - Use <filename> as output file name
  --op                                        - Preserve source path for output files
  --oq                                        - Write object files with fully qualified names
  --output-bc                                 - Write LLVM bitcode
  --output-ll                                 - Write LLVM IR
  --output-mlir                               - Write MLIR
  --output-o                                  - Write native object
  --output-s                                  - Write native assembly
  --plugin=<dynamic_library.so,lib2.so>       - Plugins to load.
  --preview=<id>                              - Enable an upcoming language change identified by <id>, use ? for list
  --release                                   - Compile release version, defaulting to disabled asserts/contracts/invariants, and bounds checks in @safe functions only
  --relocation-model=<value>                  - Choose relocation model
    =static                                   -   Non-relocatable code
    =pic                                      -   Fully relocatable, position independent code
    =dynamic-no-pic                           -   Relocatable external references, non-relocatable code
    =ropi                                     -   Code and read-only data relocatable, accessed PC-relative
    =rwpi                                     -   Read-write data relocatable, accessed relative to static base
    =ropi-rwpi                                -   Combination of ropi and rwpi
  --revert=<id>                               - Revert language change identified by <id>, use ? for list
  --run <string>...                           - Runs the resulting program, passing the remaining arguments to it
  --shared                                    - Create shared library (DLL)
  --singleobj                                 - Create only a single output object file
  --template-depth=<uint>                     - Set maximum number of nested template instantiations
  --transition=<id>                           - Help with language change identified by <id>, use ? for list
  --unittest                                  - Compile in unit tests
  -v                                          - Verbose
  --v-cg                                      - Verbose codegen
  --vcolumns                                  - Print character (column) numbers in diagnostics
  --verror-style=<value>                      - Set the style for file/line number annotations on compiler messages
    =digitalmars                              -   'file(line[,column]): message' (default)
    =gnu                                      -   'file:line[:column]: message', conforming to the GNU standard used by gcc and clang
  --verrors=<uint>                            - Limit the number of error messages (0 means unlimited)
  --verrors-context                           - Show error messages with the context of the erroring source line
  --verrors-spec                              - Show errors from speculative compiles such as __traits(compiles,...)
  --vgc                                       - List all gc allocations including hidden ones
  --vv                                        - Print front-end/glue code debug log
  Warnings:
      -w                                        - Enable warnings as errors (compilation will halt)
      --wi                                       - Enable warnings as messages (compilation will continue)

Generic Options:

  --help                                      - Display available options (--help-hidden for more)
  --help-list                                 - Display list of available options (--help-list-hidden for more)
  --version                                   - Display the version of this program

Linking options:

  -L=<linkerflag>                             - Pass <linkerflag> to the linker
  --Xcc=<ccflag>                              - Pass <ccflag> to GCC/Clang for linking
  --defaultlib=<lib1,lib2,...>                - Default libraries to link with (overrides previous)
  --disable-linker-strip-dead                 - Do not try to remove unused symbols during linking
  --gcc=<gcc|clang|...>                       - C compiler to use for linking (and external assembling). Defaults to the CC environment variable if set, otherwise to `cc`.
  --link-defaultlib-debug                     - Link with debug versions of default libraries
  --link-defaultlib-shared                    - Link with shared versions of default libraries. Defaults to true when generating a shared library (-shared).
  --link-internally                           - Use internal LLD for linking
  --linker=<lld-link|lld|gold|bfd|...>        - Set the linker to use. When explicitly set to '' (nothing), prevents LDC from passing `-fuse-ld` to `cc`.
  --mscrtlib=<libcmt[d]|msvcrt[d]>            - MS C runtime library to link with
  --static                                    - Create a statically linked binary, including all system dependencies

-d-debug can also be specified without options, in which case it enables all debug checks (i.e. asserts, boundschecks, contracts and invariants) as well as acting as -d-debug=1.

Boolean options can take an optional value, e.g., -link-defaultlib-shared=<true,false>.
Boolean options marked with (*) also have a -disable-FOO variant with inverted meaning.
