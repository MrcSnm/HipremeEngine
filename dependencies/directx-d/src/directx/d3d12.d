module directx.d3d12;
/*-------------------------------------------------------------------------------------
 *
 * Copyright (c) Microsoft Corporation
 *
 *-------------------------------------------------------------------------------------*/

version(Windows):

public import directx.dxgi;
public import directx.d3dcommon;

enum {
    D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff,
    D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff,
    D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 0xff,

    D3D12_APPEND_ALIGNED_ELEMENT = 0xffffffff,

    D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9,

    D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8,
    D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2,

    D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1,
    D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1,

    D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64,

    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4,
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1,
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1,
    D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1,

    D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32,

    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1,
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128,
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1,
    D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1,
    D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128,

    D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1,
    D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16,
    D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1,
    D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1,
    D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16,

    D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32,

    D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4,
    D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096,
    D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3,
    D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3,

    D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10,
    D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10,

    D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8,
    D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7,

    D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256,

    D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256,
    D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64,
    D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240,
    D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68,
    D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224,
    D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72,
    D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208,
    D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76,
    D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192,
    D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84,
    D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176,
    D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92,
    D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160,
    D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100,
    D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144,
    D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112,
    D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128,
    D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128,
    D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112,
    D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144,
    D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96,
    D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168,
    D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80,
    D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204,
    D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64,
    D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256,
    D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48,
    D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340,
    D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32,
    D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512,
    D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16,
    D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768,

    D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1,
    D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256,
    D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768,
    D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768,
    D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768,
    D3D12_CS_4_X_UAV_REGISTER_COUNT = 1,

    D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535,

    D3D12_CS_TGSM_REGISTER_COUNT = 8192,
    D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1,
    D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1,
    D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1,

    D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3,
    D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1,

    D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1,
    D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1,

    D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3,
    D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1,

    D3D12_CS_THREADID_REGISTER_COMPONENTS = 3,
    D3D12_CS_THREADID_REGISTER_COUNT = 1,

    D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024,
    D3D12_CS_THREAD_GROUP_MAX_X = 1024,
    D3D12_CS_THREAD_GROUP_MAX_Y = 1024,
    D3D12_CS_THREAD_GROUP_MAX_Z = 64,
    D3D12_CS_THREAD_GROUP_MIN_X = 1,
    D3D12_CS_THREAD_GROUP_MIN_Y = 1,
    D3D12_CS_THREAD_GROUP_MIN_Z = 1,

    D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384,

    D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 10f,
    D3D12_DEFAULT_BLEND_FACTOR_BLUE = 10f,
    D3D12_DEFAULT_BLEND_FACTOR_GREEN = 10f,
    D3D12_DEFAULT_BLEND_FACTOR_RED = 10f,
    D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0f,
    D3D12_DEFAULT_DEPTH_BIAS = 0,

    D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0f,
    D3D12_DEFAULT_MAX_ANISOTROPY = 16,

    D3D12_DEFAULT_MIP_LOD_BIAS = 0f ,
    D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304,

    D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0,
    D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536,
    D3D12_DEFAULT_SAMPLE_MASK = 0xffffffff,

    D3D12_DEFAULT_SCISSOR_ENDX = 0,
    D3D12_DEFAULT_SCISSOR_ENDY = 0,
    D3D12_DEFAULT_SCISSOR_STARTX = 0,
    D3D12_DEFAULT_SCISSOR_STARTY = 0,

    D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0f,
    D3D12_DEFAULT_STENCIL_READ_MASK = 0xff,
    D3D12_DEFAULT_STENCIL_REFERENCE = 0,
    D3D12_DEFAULT_STENCIL_WRITE_MASK = 0xff,

    D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0,
    D3D12_DEFAULT_VIEWPORT_HEIGHT = 0,
    D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0f,
    D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0f,
    D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0,
    D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0,
    D3D12_DEFAULT_VIEWPORT_WIDTH = 0,

    D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 0xffffffff,

    D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 0xfffffff7,
    D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff0,

    D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS= 3968,
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4,
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32,
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2,
    D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1,
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS= 3,
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1,
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2,
    D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS= 1,
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4,
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32,
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2,
    D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1,
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS= 1,
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1,
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2,
    D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS= 1,
    D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4,
    D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_DS_OUTPUT_REGISTER_COUNT = 32,

    D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 6,
    //D3D12_FLOAT32_MAX = 3402823466e+38f,
    D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 6f,
    D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 24f,
    D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 10f,
    D3D12_FLOAT_TO_SRGB_OFFSET = 55f,
    D3D12_FLOAT_TO_SRGB_SCALE_1 = 1292f,
    D3D12_FLOAT_TO_SRGB_SCALE_2 = 1055f,
    D3D12_FLOAT_TO_SRGB_THRESHOLD = 31308f,
    D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483647999f,
    D3D12_FTOI_INSTRUCTION_MIN_INPUT = -2147483648999f,
    D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967295999f,
    D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0f,

    D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2,
    D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1,
    D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1,
    D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT= 32,
    D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1,
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1,
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1,
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2,
    D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1,
    D3D12_GS_INPUT_REGISTER_COMPONENTS = 4,
    D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_GS_INPUT_REGISTER_COUNT = 32,
    D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2,
    D3D12_GS_INPUT_REGISTER_READ_PORTS = 1,
    D3D12_GS_INPUT_REGISTER_VERTICES = 32,
    D3D12_GS_MAX_INSTANCE_COUNT = 32,
    D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024,
    D3D12_GS_OUTPUT_ELEMENTS = 32,
    D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4,
    D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_GS_OUTPUT_REGISTER_COUNT = 32,
    D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32,
    D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32,
    D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4,
    D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2,
    D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1,
    D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff,
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1,
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1,
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2,
    D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1,
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1,
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1,
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2,
    D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1,
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1,
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1,
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2,
    D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1,
    D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xffffffff,
    D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 10f,
    D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 640f,
    D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968,
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1,
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1,
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2,
    D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1,
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4,
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32,
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2,
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1,
    D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128,
    D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0,
    D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0,
    D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0,
    D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1,
    D3D12_IA_INSTANCE_ID_BIT_COUNT = 32,
    D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32,
    D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32,
    D3D12_IA_PRIMITIVE_ID_BIT_COUNT= 32,
    D3D12_IA_VERTEX_ID_BIT_COUNT = 32,
    D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32,
    D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128,
    D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32,
    D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff,
    D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff,
    D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff,
    D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff,
    D3D12_LINEAR_GAMMA = 10f,
    D3D12_MAJOR_VERSION = 12,
    D3D12_MAX_BORDER_COLOR_COMPONENT = 10f,
    D3D12_MAX_DEPTH = 10f,
    D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032,
    D3D12_MAX_MAXANISOTROPY = 16,
    D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32,
    //D3D12_MAX_POSITION_VALUE = 3402823466e+34f,
    D3D12_MAX_ROOT_COST = 64,
    D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000,
    D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000,
    D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048,
    D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17,
    D3D12_MINOR_VERSION = 0,
    D3D12_MIN_BORDER_COLOR_COMPONENT = 0f,
    D3D12_MIN_DEPTH = 0f,
    D3D12_MIN_MAXANISOTROPY = 0,
    D3D12_MIP_LOD_BIAS_MAX = 1599f,
    D3D12_MIP_LOD_BIAS_MIN = -160f,
    D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8,
    D3D12_MIP_LOD_RANGE_BIT_COUNT = 8,
    D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 14f,
    D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0,
    D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff,
    D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff8,
    D3D12_PACKED_TILE = 0xffffffff,
    D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15,
    D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16,
    D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1,
    D3D12_PS_CS_UAV_REGISTER_COUNT = 8,
    D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1,
    D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1,
    D3D12_PS_FRONTFACING_DEFAULT_VALUE = 0xffffffff,
    D3D12_PS_FRONTFACING_FALSE_VALUE = 0,
    D3D12_PS_FRONTFACING_TRUE_VALUE = 0xffffffff,
    D3D12_PS_INPUT_REGISTER_COMPONENTS = 4,
    D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_PS_INPUT_REGISTER_COUNT = 32,
    D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2,
    D3D12_PS_INPUT_REGISTER_READ_PORTS = 1,
    D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0f,
    D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1,
    D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1,
    D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1,
    D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1,
    D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4,
    D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_PS_OUTPUT_REGISTER_COUNT = 8,
    D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 5f,
    D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16,
    D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096,
    D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27,
    D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096,
    D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096,
    D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32,
    D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32,
    D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384,
    D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024,
    D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096,
    D3D12_REQ_MAXANISOTROPY = 16,
    D3D12_REQ_MIP_LEVELS = 15,
    D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048,
    D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096,
    D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384,
    D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128,
    D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 25f,
    D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048,
    D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20,
    D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096,
    D3D12_REQ_SUBRESOURCES = 30720,
    D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048,
    D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384,
    D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048,
    D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384,
    D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048,
    D3D12_REQ_TEXTURECUBE_DIMENSION = 16384,
    D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0,
    D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 0xffffffff,
    D3D12_SHADER_MAJOR_VERSION = 5,
    D3D12_SHADER_MAX_INSTANCES = 65535,
    D3D12_SHADER_MAX_INTERFACES = 253,
    D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096,
    D3D12_SHADER_MAX_TYPES = 65535,
    D3D12_SHADER_MINOR_VERSION = 1,
    D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0,
    D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5,
    D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8,
    D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536,
    D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096,
    D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048,
    D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512,
    D3D12_SO_BUFFER_SLOT_COUNT = 4,
    D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff,
    D3D12_SO_NO_RASTERIZED_STREAM = 0xffffffff,
    D3D12_SO_OUTPUT_COMPONENT_COUNT = 128,
    D3D12_SO_STREAM_COUNT = 4,
    D3D12_SPEC_DATE_DAY = 14,
    D3D12_SPEC_DATE_MONTH = 11,
    D3D12_SPEC_DATE_YEAR = 2014,
    D3D12_SPEC_VERSION = 116 ,
    D3D12_SRGB_GAMMA = 22f ,
    D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 1292f ,
    D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1055f ,
    D3D12_SRGB_TO_FLOAT_EXPONENT = 24f,
    D3D12_SRGB_TO_FLOAT_OFFSET = 55f,
    D3D12_SRGB_TO_FLOAT_THRESHOLD = 4045f,
    D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 5f,
    D3D12_STANDARD_COMPONENT_BIT_COUNT = 32,
    D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64,
    D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4,
    D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128,
    D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32,
    D3D12_STANDARD_VECTOR_SIZE = 4,
    D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32,
    D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64,
    D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8,
    D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8,
    D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 0xffffffff,
    D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 0xfffffff0,
    D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64,
    D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64,
    D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63,
    D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64,
    D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2,
    D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1,
    D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1,
    D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16,
    D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256,
    D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512,
    D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES= 65536,
    D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096,
    D3D12_UAV_SLOT_COUNT = 64,
    D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0,
    D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15,
    D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16,
    D3D12_VIEWPORT_BOUNDS_MAX = 32767,
    D3D12_VIEWPORT_BOUNDS_MIN = -32768,
    D3D12_VS_INPUT_REGISTER_COMPONENTS = 4,
    D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_VS_INPUT_REGISTER_COUNT = 32,
    D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2,
    D3D12_VS_INPUT_REGISTER_READ_PORTS = 1,
    D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4,
    D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32,
    D3D12_VS_OUTPUT_REGISTER_COUNT = 32,
    D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10,
    D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25,
    D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25
}

alias UINT64 D3D12_GPU_VIRTUAL_ADDRESS;

alias D3D12_COMMAND_LIST_TYPE = uint;
enum : D3D12_COMMAND_LIST_TYPE {
    D3D12_COMMAND_LIST_TYPE_DIRECT  = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE  = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY    = 3
}

alias D3D12_COMMAND_QUEUE_FLAGS = uint;
enum : D3D12_COMMAND_QUEUE_FLAGS {
    D3D12_COMMAND_QUEUE_FLAG_NONE                = 0,
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 0x1
}

alias D3D12_COMMAND_QUEUE_PRIORITY = uint;
enum : D3D12_COMMAND_QUEUE_PRIORITY {
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH   = 100
}

struct D3D12_COMMAND_QUEUE_DESC {
	this(this) {}
    D3D12_COMMAND_LIST_TYPE   Type;
    INT                       Priority;
    D3D12_COMMAND_QUEUE_FLAGS Flags;
    UINT                      NodeMask;
}

alias D3D12_PRIMITIVE_TOPOLOGY_TYPE = uint;
enum : D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT     = 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE      = 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE  = 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH     = 4
}

alias D3D12_INPUT_CLASSIFICATION = uint;
enum : D3D12_INPUT_CLASSIFICATION {
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA   = 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
}

struct D3D12_INPUT_ELEMENT_DESC {
    LPCSTR                     SemanticName;
    UINT                       SemanticIndex;
    DXGI_FORMAT                Format;
    UINT                       InputSlot;
    UINT                       AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    UINT                       InstanceDataStepRate;
}

alias D3D12_FILL_MODE = uint;
enum : D3D12_FILL_MODE {
    D3D12_FILL_MODE_WIREFRAME = 2,
    D3D12_FILL_MODE_SOLID     = 3
}

alias D3D_PRIMITIVE_TOPOLOGY D3D12_PRIMITIVE_TOPOLOGY;
alias D3D_PRIMITIVE          D3D12_PRIMITIVE;

alias D3D12_CULL_MODE = uint;
enum : D3D12_CULL_MODE {
    D3D12_CULL_MODE_NONE  = 1,
    D3D12_CULL_MODE_FRONT = 2,
    D3D12_CULL_MODE_BACK  = 3
}

struct D3D12_SO_DECLARATION_ENTRY {
    UINT   Stream;
    LPCSTR SemanticName;
    UINT   SemanticIndex;
    BYTE   StartComponent;
    BYTE   ComponentCount;
    BYTE   OutputSlot;
}

struct D3D12_VIEWPORT {
    FLOAT TopLeftX = 0.0f;
    FLOAT TopLeftY = 0.0f;
    FLOAT Width = 0.0f;
    FLOAT Height = 0.0f;
    FLOAT MinDepth = 0.0f;
    FLOAT MaxDepth = 0.0f;
}

alias RECT D3D12_RECT;

struct D3D12_BOX {
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
}

alias D3D12_COMPARISON_FUNC = uint;
enum : D3D12_COMPARISON_FUNC {
    D3D12_COMPARISON_FUNC_NEVER         = 1,
    D3D12_COMPARISON_FUNC_LESS          = 2,
    D3D12_COMPARISON_FUNC_EQUAL         = 3,
    D3D12_COMPARISON_FUNC_LESS_EQUAL    = 4,
    D3D12_COMPARISON_FUNC_GREATER       = 5,
    D3D12_COMPARISON_FUNC_NOT_EQUAL     = 6,
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
    D3D12_COMPARISON_FUNC_ALWAYS        = 8
}

alias D3D12_DEPTH_WRITE_MASK = uint;
enum : D3D12_DEPTH_WRITE_MASK {
    D3D12_DEPTH_WRITE_MASK_ZERO = 0,
    D3D12_DEPTH_WRITE_MASK_ALL  = 1
}

alias D3D12_STENCIL_OP = uint;
enum : D3D12_STENCIL_OP {
    D3D12_STENCIL_OP_KEEP     = 1,
    D3D12_STENCIL_OP_ZERO     = 2,
    D3D12_STENCIL_OP_REPLACE  = 3,
    D3D12_STENCIL_OP_INCR_SAT = 4,
    D3D12_STENCIL_OP_DECR_SAT = 5,
    D3D12_STENCIL_OP_INVERT   = 6,
    D3D12_STENCIL_OP_INCR     = 7,
    D3D12_STENCIL_OP_DECR     = 8
}

struct D3D12_DEPTH_STENCILOP_DESC {
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
}

struct D3D12_DEPTH_STENCIL_DESC {
    BOOL DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
}

alias D3D12_BLEND = uint;
enum : D3D12_BLEND {
    D3D12_BLEND_ZERO             = 1,
    D3D12_BLEND_ONE              = 2,
    D3D12_BLEND_SRC_COLOR        = 3,
    D3D12_BLEND_INV_SRC_COLOR    = 4,
    D3D12_BLEND_SRC_ALPHA        = 5,
    D3D12_BLEND_INV_SRC_ALPHA    = 6,
    D3D12_BLEND_DEST_ALPHA       = 7,
    D3D12_BLEND_INV_DEST_ALPHA   = 8,
    D3D12_BLEND_DEST_COLOR       = 9,
    D3D12_BLEND_INV_DEST_COLOR   = 10,
    D3D12_BLEND_SRC_ALPHA_SAT    = 11,
    D3D12_BLEND_BLEND_FACTOR     = 14,
    D3D12_BLEND_INV_BLEND_FACTOR = 15,
    D3D12_BLEND_SRC1_COLOR       = 16,
    D3D12_BLEND_INV_SRC1_COLOR   = 17,
    D3D12_BLEND_SRC1_ALPHA       = 18,
    D3D12_BLEND_INV_SRC1_ALPHA   = 19
}

alias D3D12_BLEND_OP = uint;
enum : D3D12_BLEND_OP {
    D3D12_BLEND_OP_ADD          = 1,
    D3D12_BLEND_OP_SUBTRACT     = 2,
    D3D12_BLEND_OP_REV_SUBTRACT = 3,
    D3D12_BLEND_OP_MIN          = 4,
    D3D12_BLEND_OP_MAX          = 5
}

alias D3D12_COLOR_WRITE_ENABLE = uint;
enum : D3D12_COLOR_WRITE_ENABLE {
    D3D12_COLOR_WRITE_ENABLE_RED   = 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE  = 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D12_COLOR_WRITE_ENABLE_ALL   = D3D12_COLOR_WRITE_ENABLE_RED   |
        D3D12_COLOR_WRITE_ENABLE_GREEN |
        D3D12_COLOR_WRITE_ENABLE_BLUE  |
        D3D12_COLOR_WRITE_ENABLE_ALPHA
}

alias D3D12_LOGIC_OP = uint;
enum : D3D12_LOGIC_OP {
    D3D12_LOGIC_OP_CLEAR         = 0,
    D3D12_LOGIC_OP_SET           = D3D12_LOGIC_OP_CLEAR         + 1,
    D3D12_LOGIC_OP_COPY          = D3D12_LOGIC_OP_SET           + 1,
    D3D12_LOGIC_OP_COPY_INVERTED = D3D12_LOGIC_OP_COPY          + 1,
    D3D12_LOGIC_OP_NOOP          = D3D12_LOGIC_OP_COPY_INVERTED + 1,
    D3D12_LOGIC_OP_INVERT        = D3D12_LOGIC_OP_NOOP          + 1,
    D3D12_LOGIC_OP_AND           = D3D12_LOGIC_OP_INVERT        + 1,
    D3D12_LOGIC_OP_NAND          = D3D12_LOGIC_OP_AND           + 1,
    D3D12_LOGIC_OP_OR            = D3D12_LOGIC_OP_NAND          + 1,
    D3D12_LOGIC_OP_NOR           = D3D12_LOGIC_OP_OR            + 1,
    D3D12_LOGIC_OP_XOR           = D3D12_LOGIC_OP_NOR           + 1,
    D3D12_LOGIC_OP_EQUIV         = D3D12_LOGIC_OP_XOR           + 1,
    D3D12_LOGIC_OP_AND_REVERSE   = D3D12_LOGIC_OP_EQUIV         + 1,
    D3D12_LOGIC_OP_AND_INVERTED  = D3D12_LOGIC_OP_AND_REVERSE   + 1,
    D3D12_LOGIC_OP_OR_REVERSE    = D3D12_LOGIC_OP_AND_INVERTED  + 1,
    D3D12_LOGIC_OP_OR_INVERTED   = D3D12_LOGIC_OP_OR_REVERSE    + 1
}

struct D3D12_RENDER_TARGET_BLEND_DESC {
    BOOL           BlendEnable;
    BOOL           LogicOpEnable;
    D3D12_BLEND    SrcBlend;
    D3D12_BLEND    DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND    SrcBlendAlpha;
    D3D12_BLEND    DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp;
    UINT8          RenderTargetWriteMask;
}

struct D3D12_BLEND_DESC {
    BOOL                              AlphaToCoverageEnable;
    BOOL                              IndependentBlendEnable;
    D3D12_RENDER_TARGET_BLEND_DESC[8] RenderTarget;
}

alias D3D12_CONSERVATIVE_RASTERIZATION_MODE = uint;
enum : D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON  = 1
}

// defaults from MSDN
struct D3D12_RASTERIZER_DESC {
    D3D12_FILL_MODE                       FillMode = D3D12_FILL_MODE_SOLID;
    D3D12_CULL_MODE                       CullMode = D3D12_CULL_MODE_BACK;
    BOOL                                  FrontCounterClockwise = FALSE;
    INT                                   DepthBias = 0;
    FLOAT                                 DepthBiasClamp = 0.0f;
    FLOAT                                 SlopeScaledDepthBias = 0.0f;
    BOOL                                  DepthClipEnable = TRUE;
    BOOL                                  MultisampleEnable = FALSE;
    BOOL                                  AntialiasedLineEnable = FALSE;
    UINT                                  ForcedSampleCount = 0;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster = D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF;
}

mixin(uuid!(ID3D12Object, "c4fec28f-7966-4e95-9f94-f431cb56c3b8"));
extern(C++) interface ID3D12Object : IUnknown {
    HRESULT GetPrivateData(REFGUID guid,
                           UINT* pDataSize,
                           void* pData);

    HRESULT SetPrivateData(REFGUID guid,
                           UINT DataSize,
                           const(void)* pData);

    HRESULT SetPrivateDataInterface(REFGUID guid,
                                    const IUnknown pData);

    HRESULT SetName(LPCWSTR Name);
}

mixin(uuid!(ID3D12DeviceChild, "905db94b-a00c-4140-9df5-2b64ca9ea357"));
extern(C++) interface ID3D12DeviceChild : ID3D12Object {
    HRESULT GetDevice(REFIID riid,
                      void** ppvDevice);
}

mixin(uuid!(ID3D12RootSignature, "c54a6b66-72df-4ee8-8be5-a946a1429214"));
extern(C++) interface ID3D12RootSignature : ID3D12DeviceChild {}

struct D3D12_SHADER_BYTECODE {
    const(void)* pShaderBytecode;
    SIZE_T       BytecodeLength;
}

struct D3D12_STREAM_OUTPUT_DESC {
    const(D3D12_SO_DECLARATION_ENTRY)* pSODeclaration;
    UINT                               NumEntries;
    const(UINT)*                       pBufferStrides;
    UINT                               NumStrides;
    UINT                               RasterizedStream;
}

struct D3D12_INPUT_LAYOUT_DESC {
    const(D3D12_INPUT_ELEMENT_DESC)* pInputElementDescs;
    UINT                             NumElements;
}

alias D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = uint;
enum : D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED   = 0,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF     = 1,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2
}

struct D3D12_CACHED_PIPELINE_STATE {
    const(void)* pCachedBlob;
    SIZE_T       CachedBlobSizeInBytes;
}

alias D3D12_PIPELINE_STATE_FLAGS = uint;
enum : D3D12_PIPELINE_STATE_FLAGS {
    D3D12_PIPELINE_STATE_FLAG_NONE       = 0,
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 0x1
}

struct D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    ID3D12RootSignature                pRootSignature;
    D3D12_SHADER_BYTECODE              VS;
    D3D12_SHADER_BYTECODE              PS;
    D3D12_SHADER_BYTECODE              DS;
    D3D12_SHADER_BYTECODE              HS;
    D3D12_SHADER_BYTECODE              GS;
    D3D12_STREAM_OUTPUT_DESC           StreamOutput;
    D3D12_BLEND_DESC                   BlendState;
    UINT                               SampleMask;
    D3D12_RASTERIZER_DESC              RasterizerState;
    D3D12_DEPTH_STENCIL_DESC           DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC            InputLayout;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE      PrimitiveTopologyType;
    UINT                               NumRenderTargets;
    DXGI_FORMAT[8]                     RTVFormats;
    DXGI_FORMAT                        DSVFormat;
    DXGI_SAMPLE_DESC                   SampleDesc;
    UINT                               NodeMask;
    D3D12_CACHED_PIPELINE_STATE        CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS         Flags;
}

struct D3D12_COMPUTE_PIPELINE_STATE_DESC {
    ID3D12RootSignature         pRootSignature;
    D3D12_SHADER_BYTECODE       CS;
    UINT                        NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS  Flags;
}

alias D3D12_FEATURE = uint;
enum : D3D12_FEATURE {
    D3D12_FEATURE_D3D12_OPTIONS               = 0,
    D3D12_FEATURE_ARCHITECTURE                = D3D12_FEATURE_D3D12_OPTIONS  + 1,
    D3D12_FEATURE_FEATURE_LEVELS              = D3D12_FEATURE_ARCHITECTURE   + 1,
    D3D12_FEATURE_FORMAT_SUPPORT              = D3D12_FEATURE_FEATURE_LEVELS + 1,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS  = D3D12_FEATURE_FORMAT_SUPPORT + 1,
    D3D12_FEATURE_FORMAT_INFO                 = D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS + 1,
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = D3D12_FEATURE_FORMAT_INFO    + 1
}

alias D3D12_SHADER_MIN_PRECISION_SUPPORT = uint;
enum : D3D12_SHADER_MIN_PRECISION_SUPPORT {
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE   = 0,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 0x1,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 0x2
}

alias D3D12_TILED_RESOURCES_TIER = uint;
enum : D3D12_TILED_RESOURCES_TIER {
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
    D3D12_TILED_RESOURCES_TIER_1             = 1,
    D3D12_TILED_RESOURCES_TIER_2             = 2,
    D3D12_TILED_RESOURCES_TIER_3             = 3
}

alias D3D12_RESOURCE_BINDING_TIER = uint;
enum : D3D12_RESOURCE_BINDING_TIER {
    D3D12_RESOURCE_BINDING_TIER_1 = 1,
    D3D12_RESOURCE_BINDING_TIER_2 = 2,
    D3D12_RESOURCE_BINDING_TIER_3 = 3
}

alias D3D12_CONSERVATIVE_RASTERIZATION_TIER = uint;
enum : D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1             = 1,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2             = 2,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3             = 3
}

alias D3D12_FORMAT_SUPPORT1 = uint;
enum : D3D12_FORMAT_SUPPORT1 {
    D3D12_FORMAT_SUPPORT1_NONE                        = 0,
    D3D12_FORMAT_SUPPORT1_BUFFER                      = 0x1,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER            = 0x2,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER             = 0x4,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER                   = 0x8,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D                   = 0x10,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D                   = 0x20,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D                   = 0x40,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE                 = 0x80,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD                 = 0x100,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE               = 0x200,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON    = 0x400,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT     = 0x800,
    D3D12_FORMAT_SUPPORT1_MIP                         = 0x1000,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET               = 0x4000,
    D3D12_FORMAT_SUPPORT1_BLENDABLE                   = 0x8000,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL               = 0x10000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE         = 0x40000,
    D3D12_FORMAT_SUPPORT1_DISPLAY                     = 0x80000,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT      = 0x100000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET    = 0x200000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD            = 0x400000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER               = 0x800000,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST            = 0x1000000,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON    = 0x4000000,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT              = 0x8000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT      = 0x10000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT       = 0x20000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER               = 0x40000000
}

alias D3D12_FORMAT_SUPPORT2 = uint;
enum : D3D12_FORMAT_SUPPORT2 {
    D3D12_FORMAT_SUPPORT2_NONE                                         = 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                               = 0x1,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                       = 0x2,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                          = 0x8,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                 = 0x10,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX               = 0x20,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD                               = 0x40,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE                              = 0x80,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                       = 0x100,
    D3D12_FORMAT_SUPPORT2_TILED                                        = 0x200,
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY                           = 0x4000
}

alias D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = uint;
enum : D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE           = 0,
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 0x1
}

alias D3D12_CROSS_NODE_SHARING_TIER = uint;
enum : D3D12_CROSS_NODE_SHARING_TIER {
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED    = 1,
    D3D12_CROSS_NODE_SHARING_TIER_1             = 2,
    D3D12_CROSS_NODE_SHARING_TIER_2             = 3
}

alias D3D12_RESOURCE_HEAP_TIER = uint;
enum : D3D12_RESOURCE_HEAP_TIER {
    D3D12_RESOURCE_HEAP_TIER_1 = 1,
    D3D12_RESOURCE_HEAP_TIER_2 = 2
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS {
    BOOL                                  DoublePrecisionFloatShaderOps;
    BOOL                                  OutputMergerLogicOp;
    D3D12_SHADER_MIN_PRECISION_SUPPORT    MinPrecisionSupport;
    D3D12_TILED_RESOURCES_TIER            TiledResourcesTier;
    D3D12_RESOURCE_BINDING_TIER           ResourceBindingTier;
    BOOL                                  PSSpecifiedStencilRefSupported;
    BOOL                                  TypedUAVLoadAdditionalFormats;
    BOOL                                  ROVsSupported;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    UINT                                  MaxGPUVirtualAddressBitsPerResource;
    BOOL                                  StandardSwizzle64KBSupported;
    D3D12_CROSS_NODE_SHARING_TIER         CrossNodeSharingTier;
    BOOL                                  CrossAdapterRowMajorTextureSupported;
    BOOL                                  VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
    D3D12_RESOURCE_HEAP_TIER              ResourceHeapTier;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE {
    UINT NodeIndex;
    BOOL TileBasedRenderer;
    BOOL UMA;
    BOOL CacheCoherentUMA;
}

struct D3D12_FEATURE_DATA_FEATURE_LEVELS {
    UINT                      NumFeatureLevels;
    const(D3D_FEATURE_LEVEL)* pFeatureLevelsRequested;
    D3D_FEATURE_LEVEL         MaxSupportedFeatureLevel;
}

struct D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    DXGI_FORMAT           Format;
    D3D12_FORMAT_SUPPORT1 Support1;
    D3D12_FORMAT_SUPPORT2 Support2;
}

struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    DXGI_FORMAT                           Format;
    UINT                                  SampleCount;
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
    UINT                                  NumQualityLevels;
}

struct D3D12_FEATURE_DATA_FORMAT_INFO {
    DXGI_FORMAT Format;
    UINT8       PlaneCount;
}

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    UINT MaxGPUVirtualAddressBitsPerResource;
    UINT MaxGPUVirtualAddressBitsPerProcess;
}

struct D3D12_RESOURCE_ALLOCATION_INFO {
	this(this) {}
    UINT64 SizeInBytes;
    UINT64 Alignment;
}

alias D3D12_HEAP_TYPE = uint;
enum : D3D12_HEAP_TYPE {
    D3D12_HEAP_TYPE_DEFAULT = 1,
    D3D12_HEAP_TYPE_UPLOAD  = 2,
    D3D12_HEAP_TYPE_READBACK        = 3,
    D3D12_HEAP_TYPE_CUSTOM  = 4
}

alias D3D12_CPU_PAGE_PROPERTY = uint;
enum : D3D12_CPU_PAGE_PROPERTY {
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE   = 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE   = 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK      = 3
}

alias D3D12_MEMORY_POOL = uint;
enum : D3D12_MEMORY_POOL {
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0      = 1,
    D3D12_MEMORY_POOL_L1      = 2
}

struct D3D12_HEAP_PROPERTIES {
	this(this) {}
    D3D12_HEAP_TYPE         Type;
    D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
    D3D12_MEMORY_POOL       MemoryPoolPreference;
    UINT                    CreationNodeMask;
    UINT                    VisibleNodeMask;
}

alias D3D12_HEAP_FLAGS = uint;
enum : D3D12_HEAP_FLAGS {
    D3D12_HEAP_FLAG_NONE                           = 0,
    D3D12_HEAP_FLAG_SHARED                         = 0x1,
    D3D12_HEAP_FLAG_DENY_BUFFERS                   = 0x4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY                  = 0x8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER           = 0x20,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES            = 0x40,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES        = 0x80,
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS             = 0xc0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES  = 0x44,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES      = 0x84
}

struct D3D12_HEAP_DESC {
	this(this) {}
    UINT64                SizeInBytes;
    D3D12_HEAP_PROPERTIES Properties;
    UINT64                Alignment;
    D3D12_HEAP_FLAGS      Flags;
}

alias D3D12_RESOURCE_DIMENSION = uint;
enum : D3D12_RESOURCE_DIMENSION {
    D3D12_RESOURCE_DIMENSION_UNKNOWN   = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER    = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4
}

alias D3D12_TEXTURE_LAYOUT = uint;
enum : D3D12_TEXTURE_LAYOUT {
    D3D12_TEXTURE_LAYOUT_UNKNOWN                = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR              = 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE  = 3
}

alias D3D12_RESOURCE_FLAGS = uint;
enum : D3D12_RESOURCE_FLAGS {
    D3D12_RESOURCE_FLAG_NONE                      = 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET       = 0x1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL       = 0x2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS    = 0x4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE      = 0x8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER       = 0x10,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 0x20
}

struct D3D12_RESOURCE_DESC {
	this(this) {}
    D3D12_RESOURCE_DIMENSION Dimension;
    UINT64                   Alignment;
    UINT64                   Width;
    UINT                     Height;
    UINT16                   DepthOrArraySize;
    UINT16                   MipLevels;
    DXGI_FORMAT              Format;
    DXGI_SAMPLE_DESC         SampleDesc;
    D3D12_TEXTURE_LAYOUT     Layout;
    D3D12_RESOURCE_FLAGS     Flags;
}

struct D3D12_DEPTH_STENCIL_VALUE {
    FLOAT Depth = 0.0f;
    UINT8 Stencil;
}

struct D3D12_CLEAR_VALUE {
    DXGI_FORMAT Format;
    union {
        FLOAT[4]                  Color;
        D3D12_DEPTH_STENCIL_VALUE DepthStencil;
    }
}

struct D3D12_RANGE {
    SIZE_T Begin;
    SIZE_T End;
}

struct D3D12_SUBRESOURCE_INFO {
    UINT64 Offset;
    UINT   RowPitch;
    UINT   DepthPitch;
}

struct D3D12_TILED_RESOURCE_COORDINATE {
    UINT X;
    UINT Y;
    UINT Z;
    UINT Subresource;
}

struct D3D12_TILE_REGION_SIZE {
    UINT   NumTiles;
    BOOL   UseBox;
    UINT   Width;
    UINT16 Height;
    UINT16 Depth;
}

alias D3D12_TILE_RANGE_FLAGS = uint;
enum : D3D12_TILE_RANGE_FLAGS {
    D3D12_TILE_RANGE_FLAG_NONE              = 0,
    D3D12_TILE_RANGE_FLAG_NULL              = 1,
    D3D12_TILE_RANGE_FLAG_SKIP              = 2,
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4
}

struct D3D12_SUBRESOURCE_TILING {
    UINT   WidthInTiles;
    UINT16 HeightInTiles;
    UINT16 DepthInTiles;
    UINT   StartTileIndexInOverallResource;
}

struct D3D12_TILE_SHAPE {
    UINT WidthInTexels;
    UINT HeightInTexels;
    UINT DepthInTexels;
}

struct D3D12_PACKED_MIP_INFO {
    UINT8 NumStandardMips;
    UINT8 NumPackedMips;
    UINT  NumTilesForPackedMips;
    UINT  StartTileIndexInOverallResource;
}

alias D3D12_TILE_MAPPING_FLAGS = uint;
enum : D3D12_TILE_MAPPING_FLAGS {
    D3D12_TILE_MAPPING_FLAG_NONE      = 0,
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 0x1
}

alias D3D12_TILE_COPY_FLAGS = uint;
enum : D3D12_TILE_COPY_FLAGS {
    D3D12_TILE_COPY_FLAG_NONE                                     = 0,
    D3D12_TILE_COPY_FLAG_NO_HAZARD                                = 0x1,
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4
}

alias D3D12_RESOURCE_STATES = uint;
enum : D3D12_RESOURCE_STATES {
    D3D12_RESOURCE_STATE_COMMON                     = 0,
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 0x1,
    D3D12_RESOURCE_STATE_INDEX_BUFFER               = 0x2,
    D3D12_RESOURCE_STATE_RENDER_TARGET              = 0x4,
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS           = 0x8,
    D3D12_RESOURCE_STATE_DEPTH_WRITE                = 0x10,
    D3D12_RESOURCE_STATE_DEPTH_READ                 = 0x20,
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE  = 0x40,
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE      = 0x80,
    D3D12_RESOURCE_STATE_STREAM_OUT                 = 0x100,
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT          = 0x200,
    D3D12_RESOURCE_STATE_COPY_DEST                  = 0x400,
    D3D12_RESOURCE_STATE_COPY_SOURCE                = 0x800,
    D3D12_RESOURCE_STATE_RESOLVE_DEST               = 0x1000,
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE             = 0x2000,
    D3D12_RESOURCE_STATE_GENERIC_READ               = 0x1 | 0x2 | 0x40 | 0x80 | 0x200 | 0x800,
    D3D12_RESOURCE_STATE_PRESENT                    = 0,
    D3D12_RESOURCE_STATE_PREDICATION                = 0x200
}

alias D3D12_RESOURCE_BARRIER_TYPE = uint;
enum : D3D12_RESOURCE_BARRIER_TYPE {
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING   = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1,
    D3D12_RESOURCE_BARRIER_TYPE_UAV        = D3D12_RESOURCE_BARRIER_TYPE_ALIASING   + 1
}


struct D3D12_RESOURCE_TRANSITION_BARRIER {
    ID3D12Resource        pResource;
    UINT                  Subresource;
    D3D12_RESOURCE_STATES StateBefore;
    D3D12_RESOURCE_STATES StateAfter;
}

struct D3D12_RESOURCE_ALIASING_BARRIER {
    ID3D12Resource pResourceBefore;
    ID3D12Resource pResourceAfter;
}

struct D3D12_RESOURCE_UAV_BARRIER {
    ID3D12Resource pResource;
}

alias D3D12_RESOURCE_BARRIER_FLAGS = uint;
enum : D3D12_RESOURCE_BARRIER_FLAGS {
    D3D12_RESOURCE_BARRIER_FLAG_NONE       = 0,
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 0x1,
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY   = 0x2
}

struct D3D12_RESOURCE_BARRIER {
    D3D12_RESOURCE_BARRIER_TYPE  Type;
    D3D12_RESOURCE_BARRIER_FLAGS Flags;
    union {
        D3D12_RESOURCE_TRANSITION_BARRIER Transition;
        D3D12_RESOURCE_ALIASING_BARRIER   Aliasing;
        D3D12_RESOURCE_UAV_BARRIER        UAV;
    }
}

struct D3D12_SUBRESOURCE_FOOTPRINT {
    DXGI_FORMAT Format;
    UINT        Width;
    UINT        Height;
    UINT        Depth;
    UINT        RowPitch;
}

struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    UINT64                      Offset;
    D3D12_SUBRESOURCE_FOOTPRINT Footprint;
}

alias D3D12_TEXTURE_COPY_TYPE = uint;
enum : D3D12_TEXTURE_COPY_TYPE {
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT  = 1
}

struct D3D12_TEXTURE_COPY_LOCATION {
    ID3D12Resource          pResource;
    D3D12_TEXTURE_COPY_TYPE Type;
    union {
        D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
        UINT                               SubresourceIndex;
    }
}

alias D3D12_SHADER_COMPONENT_MAPPING = uint;
enum : D3D12_SHADER_COMPONENT_MAPPING {
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0           = 4,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1           = 5
}

enum {
    D3D12_SHADER_COMPONENT_MAPPING_MASK  = 0x7,
    D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3,
    D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES =
        1 << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 4),
    D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING =
        D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0, 1, 2, 3)
}

pure nothrow @nogc @safe {
    uint D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(uint Src0, uint Src1,
                                                 uint Src2, uint Src3)
    {
        return ( (Src0 & D3D12_SHADER_COMPONENT_MAPPING_MASK) |
                ((Src1 & D3D12_SHADER_COMPONENT_MAPPING_MASK) <<
                 D3D12_SHADER_COMPONENT_MAPPING_SHIFT) |
                ((Src2 & D3D12_SHADER_COMPONENT_MAPPING_MASK) <<
                 (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2)) |
                ((Src3 & D3D12_SHADER_COMPONENT_MAPPING_MASK) <<
                 (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3)) |
                D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES);
    }

    uint D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(uint ComponentToExtract,
                                                 uint Mapping)
    {
        return cast(D3D12_SHADER_COMPONENT_MAPPING)
            (Mapping >>
             (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * ComponentToExtract) &
             D3D12_SHADER_COMPONENT_MAPPING_MASK);
    }
}

alias D3D12_BUFFER_SRV_FLAGS = uint;
enum : D3D12_BUFFER_SRV_FLAGS {
    D3D12_BUFFER_SRV_FLAG_NONE = 0,
    D3D12_BUFFER_SRV_FLAG_RAW  = 0x1
}

struct D3D12_BUFFER_SRV {
    UINT64                 FirstElement;
    UINT                   NumElements;
    UINT                   StructureByteStride;
    D3D12_BUFFER_SRV_FLAGS Flags;
}

struct D3D12_TEX1D_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEX1D_ARRAY_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    UINT  FirstArraySlice;
    UINT  ArraySize;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEX2D_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    UINT  PlaneSlice;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEX2D_ARRAY_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    UINT  FirstArraySlice;
    UINT  ArraySize;
    UINT  PlaneSlice;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEX3D_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEXCUBE_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEXCUBE_ARRAY_SRV {
    UINT  MostDetailedMip;
    UINT  MipLevels;
    UINT  First2DArrayFace;
    UINT  NumCubes;
    FLOAT ResourceMinLODClamp = 0.0f;
}

struct D3D12_TEX2DMS_SRV {
    UINT UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_SRV {
    UINT FirstArraySlice;
    UINT ArraySize;
}

alias D3D12_SRV_DIMENSION = uint;
enum : D3D12_SRV_DIMENSION {
    D3D12_SRV_DIMENSION_UNKNOWN          = 0,
    D3D12_SRV_DIMENSION_BUFFER           = 1,
    D3D12_SRV_DIMENSION_TEXTURE1D        = 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY   = 3,
    D3D12_SRV_DIMENSION_TEXTURE2D        = 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY   = 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS      = 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_SRV_DIMENSION_TEXTURE3D        = 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE      = 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10
}

struct D3D12_SHADER_RESOURCE_VIEW_DESC {
    DXGI_FORMAT         Format;
    D3D12_SRV_DIMENSION ViewDimension;
    UINT                Shader4ComponentMapping;
    union
    {
        D3D12_BUFFER_SRV        Buffer;
        D3D12_TEX1D_SRV         Texture1D;
        D3D12_TEX1D_ARRAY_SRV   Texture1DArray;
        D3D12_TEX2D_SRV         Texture2D;
        D3D12_TEX2D_ARRAY_SRV   Texture2DArray;
        D3D12_TEX2DMS_SRV       Texture2DMS;
        D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D12_TEX3D_SRV         Texture3D;
        D3D12_TEXCUBE_SRV       TextureCube;
        D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
    }
}

struct D3D12_CONSTANT_BUFFER_VIEW_DESC {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT                      SizeInBytes;
}

alias D3D12_FILTER = uint;
enum : D3D12_FILTER {
    D3D12_FILTER_MIN_MAG_MIP_POINT                          = 0,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR                   = 0x1,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT             = 0x4,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR                   = 0x5,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT                   = 0x10,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR            = 0x11,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT                   = 0x14,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR                         = 0x15,
    D3D12_FILTER_ANISOTROPIC                                = 0x55,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT               = 0x80,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR        = 0x81,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT  = 0x84,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR        = 0x85,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT        = 0x90,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT        = 0x94,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR              = 0x95,
    D3D12_FILTER_COMPARISON_ANISOTROPIC                     = 0xd5,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT                  = 0x100,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR           = 0x101,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     = 0x104,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR           = 0x105,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT           = 0x110,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    = 0x111,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT           = 0x114,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                 = 0x115,
    D3D12_FILTER_MINIMUM_ANISOTROPIC                        = 0x155,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                  = 0x180,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR           = 0x181,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     = 0x184,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR           = 0x185,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT           = 0x190,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    = 0x191,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT           = 0x194,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                 = 0x195,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC                        = 0x1d5
}

alias D3D12_FILTER_TYPE = uint;
enum : D3D12_FILTER_TYPE {
    D3D12_FILTER_TYPE_POINT  = 0,
    D3D12_FILTER_TYPE_LINEAR = 1
}

alias D3D12_FILTER_REDUCTION_TYPE = uint;
enum : D3D12_FILTER_REDUCTION_TYPE {
    D3D12_FILTER_REDUCTION_TYPE_STANDARD   = 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM    = 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM    = 3
}

enum {
    D3D12_FILTER_REDUCTION_TYPE_MASK  = 0x3,
    D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7,
    D3D12_FILTER_TYPE_MASK            = 0x3,
    D3D12_MIN_FILTER_SHIFT            = 4,
    D3D12_MAG_FILTER_SHIFT            = 2,
    D3D12_MIP_FILTER_SHIFT            = 0,
    D3D12_ANISOTROPIC_FILTERING_BIT   = 0x40
}

pure nothrow @safe @nogc {
    D3D12_FILTER D3D12_ENCODE_BASIC_FILTER(D3D12_FILTER_TYPE min,
                                           D3D12_FILTER_TYPE mag,
                                           D3D12_FILTER_TYPE mip,
                                           D3D12_FILTER_REDUCTION_TYPE reduction)
    {
        return cast(D3D12_FILTER)
            (((min       & D3D12_FILTER_TYPE_MASK) << D3D12_MIN_FILTER_SHIFT ) |
             ((mag       & D3D12_FILTER_TYPE_MASK) << D3D12_MAG_FILTER_SHIFT ) |
             ((mip       & D3D12_FILTER_TYPE_MASK) << D3D12_MIP_FILTER_SHIFT ) |
             ((reduction & D3D12_FILTER_REDUCTION_TYPE_MASK) <<
              D3D12_FILTER_REDUCTION_TYPE_SHIFT));
    }

    D3D12_FILTER D3D12_ENCODE_ANISOTROPIC_FILTER(D3D12_FILTER_REDUCTION_TYPE reduction) {
        return cast(D3D12_FILTER)
            (D3D12_ANISOTROPIC_FILTERING_BIT |
             D3D12_ENCODE_BASIC_FILTER(D3D12_FILTER_TYPE_LINEAR,
                                       D3D12_FILTER_TYPE_LINEAR,
                                       D3D12_FILTER_TYPE_LINEAR,
                                       reduction));
    }

    D3D12_FILTER_TYPE D3D12_DECODE_MIN_FILTER(D3D12_FILTER D3D12Filter) {
        return cast(D3D12_FILTER_TYPE)
            ((D3D12Filter >> D3D12_MIN_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK);
    }

    D3D12_FILTER_TYPE D3D12_DECODE_MAG_FILTER(D3D12_FILTER D3D12Filter) {
        return cast(D3D12_FILTER_TYPE)
            ((D3D12Filter >> D3D12_MAG_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK);
    }

    D3D12_FILTER_TYPE D3D12_DECODE_MIP_FILTER(D3D12_FILTER D3D12Filter) {
        return cast( D3D12_FILTER_TYPE )
            ((D3D12Filter >> D3D12_MIP_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK);
    }

    D3D12_FILTER_REDUCTION_TYPE D3D12_DECODE_FILTER_REDUCTION(D3D12_FILTER D3D12Filter) {
        return cast(D3D12_FILTER_REDUCTION_TYPE)
            ((D3D12Filter >> D3D12_FILTER_REDUCTION_TYPE_SHIFT) &
             D3D12_FILTER_REDUCTION_TYPE_MASK);
    }

    bool D3D12_DECODE_IS_COMPARISON_FILTER(D3D12_FILTER D3D12Filter) {
        return D3D12_DECODE_FILTER_REDUCTION(D3D12Filter) ==
            D3D12_FILTER_REDUCTION_TYPE_COMPARISON;
    }

    bool D3D12_DECODE_IS_ANISOTROPIC_FILTER(D3D12_FILTER D3D12Filter) {
        return ((D3D12Filter & D3D12_ANISOTROPIC_FILTERING_BIT) &&
                (D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER(D3D12Filter)) &&
                (D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER(D3D12Filter)) &&
                (D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER(D3D12Filter)));
    }
}

alias D3D12_TEXTURE_ADDRESS_MODE = uint;
enum : D3D12_TEXTURE_ADDRESS_MODE {
    D3D12_TEXTURE_ADDRESS_MODE_WRAP         = 1,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR       = 2,
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP        = 3,
    D3D12_TEXTURE_ADDRESS_MODE_BORDER       = 4,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE  = 5
}

struct D3D12_SAMPLER_DESC {
    D3D12_FILTER               Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT                      MipLODBias = 0.0f;
    UINT                       MaxAnisotropy;
    D3D12_COMPARISON_FUNC      ComparisonFunc;
    FLOAT[4]                   BorderColor = [ 0.0f, 0.0f, 0.0f, 1.0f ];
    FLOAT                      MinLOD = 0.0f;
    FLOAT                      MaxLOD = 0.0f;
}

alias D3D12_BUFFER_UAV_FLAGS = uint;
enum : D3D12_BUFFER_UAV_FLAGS {
    D3D12_BUFFER_UAV_FLAG_NONE = 0,
    D3D12_BUFFER_UAV_FLAG_RAW  = 0x1
}

struct D3D12_BUFFER_UAV {
    UINT64                 FirstElement;
    UINT                   NumElements;
    UINT                   StructureByteStride;
    UINT64                 CounterOffsetInBytes;
    D3D12_BUFFER_UAV_FLAGS Flags;
}

struct D3D12_TEX1D_UAV {
    UINT MipSlice;
}

struct D3D12_TEX1D_ARRAY_UAV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D12_TEX2D_UAV {
    UINT MipSlice;
    UINT PlaneSlice;
}

struct D3D12_TEX2D_ARRAY_UAV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    UINT PlaneSlice;
}

struct D3D12_TEX3D_UAV {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}

alias D3D12_UAV_DIMENSION = uint;
enum : D3D12_UAV_DIMENSION {
    D3D12_UAV_DIMENSION_UNKNOWN        = 0,
    D3D12_UAV_DIMENSION_BUFFER         = 1,
    D3D12_UAV_DIMENSION_TEXTURE1D      = 2,
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_UAV_DIMENSION_TEXTURE2D      = 4,
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_UAV_DIMENSION_TEXTURE3D      = 8
}

struct D3D12_UNORDERED_ACCESS_VIEW_DESC {
    DXGI_FORMAT         Format;
    D3D12_UAV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_UAV      Buffer;
        D3D12_TEX1D_UAV       Texture1D;
        D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        D3D12_TEX2D_UAV       Texture2D;
        D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        D3D12_TEX3D_UAV       Texture3D;
    }
}

struct D3D12_BUFFER_RTV {
    UINT64 FirstElement;
    UINT   NumElements;
}

struct D3D12_TEX1D_RTV {
    UINT MipSlice;
}

struct D3D12_TEX1D_ARRAY_RTV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D12_TEX2D_RTV {
    UINT MipSlice;
    UINT PlaneSlice;
}

struct D3D12_TEX2DMS_RTV {
    UINT UnusedField_NothingToDefine;
}

struct D3D12_TEX2D_ARRAY_RTV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    UINT PlaneSlice;
}

struct D3D12_TEX2DMS_ARRAY_RTV {
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D12_TEX3D_RTV {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}

alias D3D12_RTV_DIMENSION = uint;
enum : D3D12_RTV_DIMENSION {
    D3D12_RTV_DIMENSION_UNKNOWN          = 0,
    D3D12_RTV_DIMENSION_BUFFER           = 1,
    D3D12_RTV_DIMENSION_TEXTURE1D        = 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY   = 3,
    D3D12_RTV_DIMENSION_TEXTURE2D        = 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY   = 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS      = 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_RTV_DIMENSION_TEXTURE3D        = 8
}

struct D3D12_RENDER_TARGET_VIEW_DESC {
    DXGI_FORMAT         Format;
    D3D12_RTV_DIMENSION ViewDimension;
    union
    {
        D3D12_BUFFER_RTV        Buffer;
        D3D12_TEX1D_RTV         Texture1D;
        D3D12_TEX1D_ARRAY_RTV   Texture1DArray;
        D3D12_TEX2D_RTV         Texture2D;
        D3D12_TEX2D_ARRAY_RTV   Texture2DArray;
        D3D12_TEX2DMS_RTV       Texture2DMS;
        D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D12_TEX3D_RTV         Texture3D;
    }
}

struct D3D12_TEX1D_DSV {
    UINT MipSlice;
}

struct D3D12_TEX1D_ARRAY_DSV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D12_TEX2D_DSV {
    UINT MipSlice;
}

struct D3D12_TEX2D_ARRAY_DSV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D12_TEX2DMS_DSV {
    UINT UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_DSV {
    UINT FirstArraySlice;
    UINT ArraySize;
}

alias D3D12_DSV_FLAGS = uint;
enum : D3D12_DSV_FLAGS {
    D3D12_DSV_FLAG_NONE              = 0,
    D3D12_DSV_FLAG_READ_ONLY_DEPTH   = 0x1,
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 0x2
}

alias D3D12_DSV_DIMENSION = uint;
enum : D3D12_DSV_DIMENSION {
    D3D12_DSV_DIMENSION_UNKNOWN          = 0,
    D3D12_DSV_DIMENSION_TEXTURE1D        = 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY   = 2,
    D3D12_DSV_DIMENSION_TEXTURE2D        = 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY   = 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS      = 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
}

struct D3D12_DEPTH_STENCIL_VIEW_DESC {
    DXGI_FORMAT         Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS     Flags;
    union
    {
        D3D12_TEX1D_DSV         Texture1D;
        D3D12_TEX1D_ARRAY_DSV   Texture1DArray;
        D3D12_TEX2D_DSV         Texture2D;
        D3D12_TEX2D_ARRAY_DSV   Texture2DArray;
        D3D12_TEX2DMS_DSV       Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
}

alias D3D12_CLEAR_FLAGS = uint;
enum : D3D12_CLEAR_FLAGS {
    D3D12_CLEAR_FLAG_DEPTH   = 0x1,
    D3D12_CLEAR_FLAG_STENCIL = 0x2
}

alias D3D12_FENCE_FLAGS = uint;
enum : D3D12_FENCE_FLAGS {
    D3D12_FENCE_FLAG_NONE                 = 0,
    D3D12_FENCE_FLAG_SHARED               = 0x1,
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 0x2
}

alias D3D12_DESCRIPTOR_HEAP_TYPE = uint;
enum : D3D12_DESCRIPTOR_HEAP_TYPE {
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER     = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1,
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV         = D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER     + 1,
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV         = D3D12_DESCRIPTOR_HEAP_TYPE_RTV         + 1,
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES   = D3D12_DESCRIPTOR_HEAP_TYPE_DSV         + 1
}

alias D3D12_DESCRIPTOR_HEAP_FLAGS = uint;
enum : D3D12_DESCRIPTOR_HEAP_FLAGS {
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE           = 0,
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 0x1
}

struct D3D12_DESCRIPTOR_HEAP_DESC {
	this(this) {}
    D3D12_DESCRIPTOR_HEAP_TYPE  Type;
    UINT                        NumDescriptors;
    D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
    UINT                        NodeMask;
}

alias D3D12_DESCRIPTOR_RANGE_TYPE = uint;
enum : D3D12_DESCRIPTOR_RANGE_TYPE {
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV     = 0,
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV     = D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1,
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV     = D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1,
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1
}

struct D3D12_DESCRIPTOR_RANGE {
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    UINT                        NumDescriptors;
    UINT                        BaseShaderRegister;
    UINT                        RegisterSpace;
    UINT                        OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE {
    UINT                           NumDescriptorRanges;
    const(D3D12_DESCRIPTOR_RANGE)* pDescriptorRanges;
}

struct D3D12_ROOT_CONSTANTS {
    UINT ShaderRegister;
    UINT RegisterSpace;
    UINT Num32BitValues;
}

struct D3D12_ROOT_DESCRIPTOR {
    UINT ShaderRegister;
    UINT RegisterSpace;
}

alias D3D12_SHADER_VISIBILITY = uint;
enum : D3D12_SHADER_VISIBILITY {
    D3D12_SHADER_VISIBILITY_ALL      = 0,
    D3D12_SHADER_VISIBILITY_VERTEX   = 1,
    D3D12_SHADER_VISIBILITY_HULL     = 2,
    D3D12_SHADER_VISIBILITY_DOMAIN   = 3,
    D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
    D3D12_SHADER_VISIBILITY_PIXEL    = 5
}

alias D3D12_ROOT_PARAMETER_TYPE = uint;
enum : D3D12_ROOT_PARAMETER_TYPE {
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS  = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1,
    D3D12_ROOT_PARAMETER_TYPE_CBV              = D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS  + 1,
    D3D12_ROOT_PARAMETER_TYPE_SRV              = D3D12_ROOT_PARAMETER_TYPE_CBV              + 1,
    D3D12_ROOT_PARAMETER_TYPE_UAV              = D3D12_ROOT_PARAMETER_TYPE_SRV              + 1
}

struct D3D12_ROOT_PARAMETER {
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    union {
        D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
        D3D12_ROOT_CONSTANTS        Constants;
        D3D12_ROOT_DESCRIPTOR       Descriptor;
    }
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

alias D3D12_ROOT_SIGNATURE_FLAGS = uint;
enum : D3D12_ROOT_SIGNATURE_FLAGS {
    D3D12_ROOT_SIGNATURE_FLAG_NONE                               = 0,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS     = 0x2,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS       = 0x4,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS     = 0x8,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS   = 0x10,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS      = 0x20,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT                = 0x40
}

alias D3D12_STATIC_BORDER_COLOR = uint;
enum : D3D12_STATIC_BORDER_COLOR {
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK      = D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE      = D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK      + 1
}

struct D3D12_STATIC_SAMPLER_DESC {
    D3D12_FILTER               Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT                      MipLODBias = 0.0f;
    UINT                       MaxAnisotropy;
    D3D12_COMPARISON_FUNC      ComparisonFunc;
    D3D12_STATIC_BORDER_COLOR  BorderColor;
    FLOAT                      MinLOD = 0.0f;
    FLOAT                      MaxLOD = 0.0f;
    UINT                       ShaderRegister;
    UINT                       RegisterSpace;
    D3D12_SHADER_VISIBILITY    ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC {
    UINT                              NumParameters;
    const(D3D12_ROOT_PARAMETER)*      pParameters;
    UINT                              NumStaticSamplers;
    const(D3D12_STATIC_SAMPLER_DESC)* pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS        Flags;
}

alias D3D_ROOT_SIGNATURE_VERSION = uint;
enum : D3D_ROOT_SIGNATURE_VERSION {
    D3D_ROOT_SIGNATURE_VERSION_1 = 0x1
}

mixin(uuid!(ID3D12RootSignatureDeserializer, "34AB647B-3CC8-46AC-841B-C0965645C046"));
extern(C++) interface ID3D12RootSignatureDeserializer : IUnknown {
    const(D3D12_ROOT_SIGNATURE_DESC)* GetRootSignatureDesc();
}



extern(Windows) nothrow
HRESULT D3D12SerializeRootSignature(const(D3D12_ROOT_SIGNATURE_DESC)* pRootSignature,
                                    D3D_ROOT_SIGNATURE_VERSION Version,
                                    ID3DBlob* ppBlob,
                                    ID3DBlob* ppErrorBlob);

alias PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = extern(Windows) nothrow HRESULT function(
                     const(D3D12_ROOT_SIGNATURE_DESC)* pRootSignature,
                     D3D_ROOT_SIGNATURE_VERSION Version,
                     ID3DBlob* ppBlob,
                     ID3DBlob* ppErrorBlob);



extern(Windows) nothrow
HRESULT D3D12CreateRootSignatureDeserializer(LPCVOID pSrcData,
                                             SIZE_T SrcDataSizeInBytes,
                                             REFIID pRootSignatureDeserializerInterface,
                                             void** ppRootSignatureDeserializer);

alias PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = extern(Windows) nothrow HRESULT function(
                                                                      LPCVOID pSrcData,
                                                                      SIZE_T SrcDataSizeInBytes,
                                                                      REFIID pRootSignatureDeserializerInterface,
                                                                      void** ppRootSignatureDeserializer);


struct D3D12_CPU_DESCRIPTOR_HANDLE {
	this(this) {}
    SIZE_T ptr;
}

struct D3D12_GPU_DESCRIPTOR_HANDLE {
	this(this) {}
    UINT64 ptr;
}

// If rects are supplied in D3D12_DISCARD_REGION, below, the resource
// must have 2D subresources with all specified subresources the same dimension.
struct D3D12_DISCARD_REGION {
    UINT               NumRects;
    const(D3D12_RECT)* pRects;
    UINT               FirstSubresource;
    UINT               NumSubresources;
}

alias D3D12_QUERY_HEAP_TYPE = uint;
enum : D3D12_QUERY_HEAP_TYPE {
    D3D12_QUERY_HEAP_TYPE_OCCLUSION           = 0,
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP           = 1,
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS       = 3
}

struct D3D12_QUERY_HEAP_DESC {
    D3D12_QUERY_HEAP_TYPE Type;
    UINT                  Count;
    UINT                  NodeMask;
}

alias D3D12_QUERY_TYPE = uint;
enum : D3D12_QUERY_TYPE {
    D3D12_QUERY_TYPE_OCCLUSION             = 0,
    D3D12_QUERY_TYPE_BINARY_OCCLUSION      = 1,
    D3D12_QUERY_TYPE_TIMESTAMP             = 2,
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS   = 3,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7
}

alias D3D12_PREDICATION_OP = uint;
enum : D3D12_PREDICATION_OP {
    D3D12_PREDICATION_OP_EQUAL_ZERO     = 0,
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1
}

struct D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    UINT64 HSInvocations;
    UINT64 DSInvocations;
    UINT64 CSInvocations;
}

struct D3D12_QUERY_DATA_SO_STATISTICS {
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
}

struct D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT64                    SizeInBytes;
    D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
}

struct D3D12_DRAW_ARGUMENTS {
    UINT VertexCountPerInstance;
    UINT InstanceCount;
    UINT StartVertexLocation;
    UINT StartInstanceLocation;
}

struct D3D12_DRAW_INDEXED_ARGUMENTS {
    UINT IndexCountPerInstance;
    UINT InstanceCount;
    UINT StartIndexLocation;
    INT  BaseVertexLocation;
    UINT StartInstanceLocation;
}

struct D3D12_DISPATCH_ARGUMENTS {
    UINT ThreadGroupCountX;
    UINT ThreadGroupCountY;
    UINT ThreadGroupCountZ;
}

struct D3D12_VERTEX_BUFFER_VIEW {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT                      SizeInBytes;
    UINT                      StrideInBytes;
}

struct D3D12_INDEX_BUFFER_VIEW {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    UINT                      SizeInBytes;
    DXGI_FORMAT               Format;
}

alias D3D12_INDIRECT_ARGUMENT_TYPE = uint;
enum : D3D12_INDIRECT_ARGUMENT_TYPE {
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW                  = 0,
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED          = D3D12_INDIRECT_ARGUMENT_TYPE_DRAW                 + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH              = D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED         + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW    = D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH             + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW     = D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW   + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT              = D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW    + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW  = D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT             + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW  = D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1
}

struct D3D12_INDIRECT_ARGUMENT_DESC {
    D3D12_INDIRECT_ARGUMENT_TYPE Type;
    union {
        struct {
            UINT Slot;
        }
        static struct _Constant {
            UINT RootParameterIndex;
            UINT DestOffsetIn32BitValues;
            UINT Num32BitValuesToSet;
        }
        static struct _ConstantBufferView {
            UINT RootParameterIndex;
        }
        static struct _ShaderResourceView {
            UINT RootParameterIndex;
        }
        static struct _UnorderedAccessView {
            UINT RootParameterIndex;
        }

        _Constant Constant;
        _ConstantBufferView ConstantBufferView;
        _ShaderResourceView ShaderResourceView;
        _UnorderedAccessView UnorderedAccessView;
    }
}

struct D3D12_COMMAND_SIGNATURE_DESC {
    UINT                                 ByteStride;
    UINT                                 NumArgumentDescs;
    const(D3D12_INDIRECT_ARGUMENT_DESC)* pArgumentDescs;
    UINT                                 NodeMask;
}

mixin(uuid!(ID3D12Pageable, "63ee58fb-1268-4835-86da-f008ce62f0d6"));
extern(C++) interface ID3D12Pageable : ID3D12DeviceChild {}

mixin(uuid!(ID3D12Heap, "6b3b2502-6e51-45b3-90ee-9884265e8df3"));
extern(C++) interface ID3D12Heap : ID3D12Pageable {

	version(CORRECT_ABI)
	{
    D3D12_HEAP_DESC GetDesc();
	}
	else
	{
	void GetDesc(D3D12_HEAP_DESC* outDesc);
	}

	version(CORRECT_ABI){}
	else
	{
	final D3D12_HEAP_DESC GetDesc()
	{
		D3D12_HEAP_DESC temp;
		GetDesc(&temp);
		return temp;
	}
	}


}

mixin(uuid!(ID3D12Resource, "696442be-a72e-4059-bc79-5b5c98040fad"));
extern(C++) interface ID3D12Resource : ID3D12Pageable {
    HRESULT Map(UINT Subresource,
                const(D3D12_RANGE)*pReadRange,
                void** ppData);

    void Unmap(UINT Subresource,
               const(D3D12_RANGE)* pWrittenRange);

	version(CORRECT_ABI)
	{
    D3D12_RESOURCE_DESC GetDesc();
	}
	else
	{
	void GetDesc(D3D12_RESOURCE_DESC* outDesc);
	}

    D3D12_GPU_VIRTUAL_ADDRESS GetGPUVirtualAddress();

    HRESULT WriteToSubresource(UINT DstSubresource,
                               const(D3D12_BOX)* pDstBox,
                               const(void)* pSrcData,
                               UINT SrcRowPitch,
                               UINT SrcDepthPitch);

    HRESULT ReadFromSubresource(void* pDstData,
                                UINT DstRowPitch,
                                UINT DstDepthPitch,
                                UINT SrcSubresource,
                                const(D3D12_BOX)* pSrcBox);

    HRESULT GetHeapProperties(D3D12_HEAP_PROPERTIES* pHeapProperties,
                              D3D12_HEAP_FLAGS* pHeapFlags);



	version(CORRECT_ABI){}
	else
	{
	final D3D12_RESOURCE_DESC GetDesc()
	{
		D3D12_RESOURCE_DESC temp;
		GetDesc(&temp);
		return temp;
	}
	}
}

mixin(uuid!(ID3D12CommandAllocator, "6102dee4-af59-4b09-b999-b44d73f09b24"));
extern(C++) interface ID3D12CommandAllocator : ID3D12Pageable {
    HRESULT Reset();
}

mixin(uuid!(ID3D12Fence, "0a753dcf-c4d8-4b91-adf6-be5a60d95a76"));
extern(C++) interface ID3D12Fence : ID3D12Pageable {
    UINT64 GetCompletedValue();

    HRESULT SetEventOnCompletion(UINT64 Value, HANDLE hEvent);

    HRESULT Signal(UINT64 Value);
}

mixin(uuid!(ID3D12PipelineState, "765a30f3-f624-4c6f-a828-ace948622445"));
extern(C++) interface ID3D12PipelineState : ID3D12Pageable {
    HRESULT GetCachedBlob(ID3DBlob*ppBlob);
}

mixin(uuid!(ID3D12DescriptorHeap, "8efb471d-616c-4f49-90f7-127bb763fa51"));
extern(C++) interface ID3D12DescriptorHeap : ID3D12Pageable {

	version(CORRECT_ABI)
	{
    D3D12_DESCRIPTOR_HEAP_DESC GetDesc();

    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart();

    D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart();
	}
	else
	{
	void GetDesc(D3D12_DESCRIPTOR_HEAP_DESC* outDesc);

	void GetCPUDescriptorHandleForHeapStart(D3D12_CPU_DESCRIPTOR_HANDLE* outHandle);

	void GetGPUDescriptorHandleForHeapStart(D3D12_GPU_DESCRIPTOR_HANDLE* outHandle);
	}

	// ==============================================================================
	// Helpers for incorrect ABI below

	version(CORRECT_ABI){}
	else
	{
	final D3D12_DESCRIPTOR_HEAP_DESC GetDesc()
	{
		D3D12_DESCRIPTOR_HEAP_DESC temp;
		GetDesc(&temp);
		return temp;
	}

	final D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart()
	{
		D3D12_CPU_DESCRIPTOR_HANDLE temp;
		GetCPUDescriptorHandleForHeapStart(&temp);
		return temp;
	}

	final D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart()
	{
		D3D12_GPU_DESCRIPTOR_HANDLE temp;
		GetGPUDescriptorHandleForHeapStart(&temp);
		return temp;
	}
	} // version(CORRECT_ABI) else
}

mixin(uuid!(ID3D12QueryHeap, "0d9658ae-ed45-469e-a61d-970ec583cab4"));
extern(C++) interface ID3D12QueryHeap : ID3D12Pageable {}

mixin(uuid!(ID3D12CommandSignature, "c36a797c-ec80-4f0a-8985-a7b2475082d1"));
extern(C++) interface ID3D12CommandSignature : ID3D12Pageable {}

mixin(uuid!(ID3D12CommandList, "7116d91c-e7e4-47ce-b8c6-ec8168f437e5"));
extern(C++) interface ID3D12CommandList : ID3D12DeviceChild {

    D3D12_COMMAND_LIST_TYPE GetType();
}

mixin(uuid!(ID3D12GraphicsCommandList, "5b160d0f-ac1b-4185-8ba8-b3ae42a5a455"));
extern(C++) interface ID3D12GraphicsCommandList : ID3D12CommandList {
    HRESULT Close();

    HRESULT Reset(ID3D12CommandAllocator pAllocator,
                  ID3D12PipelineState pInitialState);

    void ClearState(ID3D12PipelineState pPipelineState);

    void DrawInstanced(
        UINT VertexCountPerInstance,
        UINT InstanceCount,
        UINT StartVertexLocation,
        UINT StartInstanceLocation);

    void DrawIndexedInstanced(
        UINT IndexCountPerInstance,
        UINT InstanceCount,
        UINT StartIndexLocation,
        INT BaseVertexLocation,
        UINT StartInstanceLocation);

    void Dispatch(
        UINT ThreadGroupCountX,
        UINT ThreadGroupCountY,
        UINT ThreadGroupCountZ);

    void CopyBufferRegion(
        ID3D12Resource pDstBuffer,
        UINT64 DstOffset,
        ID3D12Resource pSrcBuffer,
        UINT64 SrcOffset,
        UINT64 NumBytes);

    void CopyTextureRegion(
        const(D3D12_TEXTURE_COPY_LOCATION)* pDst,
        UINT DstX,
        UINT DstY,
        UINT DstZ,
        const(D3D12_TEXTURE_COPY_LOCATION)* pSrc,
        const(D3D12_BOX)* pSrcBox);

    void CopyResource(
        ID3D12Resource pDstResource,
        ID3D12Resource pSrcResource);

    void CopyTiles(
        ID3D12Resource pTiledResource,
        const(D3D12_TILED_RESOURCE_COORDINATE)* pTileRegionStartCoordinate,
        const(D3D12_TILE_REGION_SIZE)* pTileRegionSize,
        ID3D12Resource pBuffer,
        UINT64 BufferStartOffsetInBytes,
        D3D12_TILE_COPY_FLAGS Flags);

    void ResolveSubresource(
        ID3D12Resource pDstResource,
        UINT DstSubresource,
        ID3D12Resource pSrcResource,
        UINT SrcSubresource,
        DXGI_FORMAT Format);

    void IASetPrimitiveTopology(
        D3D12_PRIMITIVE_TOPOLOGY PrimitiveTopology);

    void RSSetViewports(
        UINT NumViewports,
        const(D3D12_VIEWPORT) *pViewports);

    void RSSetScissorRects(
        UINT NumRects,
        const(D3D12_RECT)* pRects);

    void OMSetBlendFactor(
        const(FLOAT)[4] BlendFactor);

    void OMSetStencilRef(
        UINT StencilRef);

    void SetPipelineState(
        ID3D12PipelineState pPipelineState);

    void ResourceBarrier(
        UINT NumBarriers,
        const(D3D12_RESOURCE_BARRIER)* pBarriers);

    void ExecuteBundle(
        ID3D12GraphicsCommandList pCommandList);

    void SetDescriptorHeaps(
        UINT NumDescriptorHeaps,
        ID3D12DescriptorHeap *ppDescriptorHeaps);

    void SetComputeRootSignature(
        ID3D12RootSignature pRootSignature);

    void SetGraphicsRootSignature(
        ID3D12RootSignature pRootSignature);

    void SetComputeRootDescriptorTable(
        UINT RootParameterIndex,
        D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

    void SetGraphicsRootDescriptorTable(
        UINT RootParameterIndex,
        D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

    void SetComputeRoot32BitConstant(
        UINT RootParameterIndex,
        UINT SrcData,
        UINT DestOffsetIn32BitValues);

    void SetGraphicsRoot32BitConstant(
        UINT RootParameterIndex,
        UINT SrcData,
        UINT DestOffsetIn32BitValues);

    void SetComputeRoot32BitConstants(
        UINT RootParameterIndex,
        UINT Num32BitValuesToSet,
        const(void)* pSrcData,
        UINT DestOffsetIn32BitValues);

    void SetGraphicsRoot32BitConstants(
        UINT RootParameterIndex,
        UINT Num32BitValuesToSet,
        const(void) *pSrcData,
        UINT DestOffsetIn32BitValues);

    void SetComputeRootConstantBufferView(
        UINT RootParameterIndex,
        D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

    void SetGraphicsRootConstantBufferView(
        UINT RootParameterIndex,
        D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

    void SetComputeRootShaderResourceView(
        UINT RootParameterIndex,
        D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

    void SetGraphicsRootShaderResourceView(
        UINT RootParameterIndex,
        D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

    void SetComputeRootUnorderedAccessView(
        UINT RootParameterIndex,
        D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

    void SetGraphicsRootUnorderedAccessView(
        UINT RootParameterIndex,
        D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);

    void IASetIndexBuffer(
        const(D3D12_INDEX_BUFFER_VIEW)* pView);

    void IASetVertexBuffers(
        UINT StartSlot,
        UINT NumViews,
        const(D3D12_VERTEX_BUFFER_VIEW)* pViews);

    void SOSetTargets(
        UINT StartSlot,
        UINT NumViews,
        const(D3D12_STREAM_OUTPUT_BUFFER_VIEW)* pViews);

    void OMSetRenderTargets(
        UINT NumRenderTargetDescriptors,
        const(D3D12_CPU_DESCRIPTOR_HANDLE)* pRenderTargetDescriptors,
        BOOL RTsSingleHandleToDescriptorRange,
        const(D3D12_CPU_DESCRIPTOR_HANDLE)* pDepthStencilDescriptor);

    void ClearDepthStencilView(
        D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView,
        D3D12_CLEAR_FLAGS ClearFlags,
        FLOAT Depth,
        UINT8 Stencil,
        UINT NumRects,
        const(D3D12_RECT)* pRects);

    void ClearRenderTargetView(
        D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView,
        const(FLOAT)* ColorRGBA,
        UINT NumRects,
        const(D3D12_RECT)* pRects);

    void ClearUnorderedAccessViewUint(
        D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
        D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
        ID3D12Resource pResource,
        const(UINT)* Values,
        UINT NumRects,
        const(D3D12_RECT)* pRects);

    void ClearUnorderedAccessViewFloat(
        D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
        D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
        ID3D12Resource pResource,
        const(FLOAT)* Values,
        UINT NumRects,
        const(D3D12_RECT)* pRects);

    void DiscardResource(
        ID3D12Resource pResource,
        const(D3D12_DISCARD_REGION)* pRegion);

    void BeginQuery(
        ID3D12QueryHeap pQueryHeap,
        D3D12_QUERY_TYPE Type,
        UINT Index);

    void EndQuery(
        ID3D12QueryHeap pQueryHeap,
        D3D12_QUERY_TYPE Type,
        UINT Index);

    void ResolveQueryData(
        ID3D12QueryHeap pQueryHeap,
        D3D12_QUERY_TYPE Type,
        UINT StartIndex,
        UINT NumQueries,
        ID3D12Resource pDestinationBuffer,
        UINT64 AlignedDestinationBufferOffset);

    void SetPredication(
        ID3D12Resource pBuffer,
        UINT64 AlignedBufferOffset,
        D3D12_PREDICATION_OP Operation);

    void SetMarker(
        UINT Metadata,
        const(void)* pData,
        UINT Size);

    void BeginEvent(
        UINT Metadata,
        const(void)* pData,
        UINT Size);

    void EndEvent();

    void ExecuteIndirect(
        ID3D12CommandSignature pCommandSignature,
        UINT MaxCommandCount,
        ID3D12Resource pArgumentBuffer,
        UINT64 ArgumentBufferOffset,
        ID3D12Resource pCountBuffer,
        UINT64 CountBufferOffset);
}

mixin(uuid!(ID3D12CommandQueue, "0ec870a6-5d7e-4c22-8cfc-5baae07616ed"));
extern(C++) interface ID3D12CommandQueue : ID3D12Pageable {
    void UpdateTileMappings(
        ID3D12Resource pResource,
        UINT NumResourceRegions,
        const(D3D12_TILED_RESOURCE_COORDINATE)* pResourceRegionStartCoordinates,
        const(D3D12_TILE_REGION_SIZE)* pResourceRegionSizes,
        ID3D12Heap pHeap,
        UINT NumRanges,
        const(D3D12_TILE_RANGE_FLAGS)* pRangeFlags,
        const(UINT)* pHeapRangeStartOffsets,
        const(UINT)* pRangeTileCounts,
        D3D12_TILE_MAPPING_FLAGS Flags);

    void CopyTileMappings(
        ID3D12Resource pDstResource,
        const(D3D12_TILED_RESOURCE_COORDINATE)* pDstRegionStartCoordinate,
        ID3D12Resource pSrcResource,
        const(D3D12_TILED_RESOURCE_COORDINATE)* pSrcRegionStartCoordinate,
        const(D3D12_TILE_REGION_SIZE)* pRegionSize,
        D3D12_TILE_MAPPING_FLAGS Flags);

    void ExecuteCommandLists(
        UINT NumCommandLists,
        const(ID3D12CommandList)* ppCommandLists);

    void SetMarker(
        UINT Metadata,
        const(void)* pData,
        UINT Size);

    void BeginEvent(
        UINT Metadata,
        const(void)* pData,
        UINT Size);

    void EndEvent();

    HRESULT Signal(
        ID3D12Fence pFence,
        UINT64 Value);

    HRESULT Wait(
        ID3D12Fence pFence,
        UINT64 Value);

    HRESULT GetTimestampFrequency(
        UINT64* pFrequency);

    HRESULT GetClockCalibration(
        UINT64* pGpuTimestamp,
        UINT64* pCpuTimestamp);

	version(CORRECT_ABI)
	{
    D3D12_COMMAND_QUEUE_DESC GetDesc();
	}
	else
	{
	void GetDesc(D3D12_COMMAND_QUEUE_DESC* outDesc);
	}

	version(CORRECT_ABI){}
	else
	{
	final D3D12_COMMAND_QUEUE_DESC GetDesc()
	{
		D3D12_COMMAND_QUEUE_DESC temp;
		GetDesc(&temp);
		return temp;
	}
	}

}

mixin(uuid!(ID3D12Device, "189819f1-1db6-4b57-be54-1821339b85f7"));
extern(C++) interface ID3D12Device : ID3D12Object {
    UINT GetNodeCount();

    HRESULT CreateCommandQueue(
        const(D3D12_COMMAND_QUEUE_DESC)* pDesc,
        REFIID riid,
        ID3D12CommandQueue* ppCommandQueue);

    HRESULT CreateCommandAllocator(
        D3D12_COMMAND_LIST_TYPE type,
        REFIID riid,
        ID3D12CommandAllocator* ppCommandAllocator);

    HRESULT CreateGraphicsPipelineState(
        const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)* pDesc,
        REFIID riid,
        ID3D12PipelineState* ppPipelineState);

    HRESULT CreateComputePipelineState(
        const(D3D12_COMPUTE_PIPELINE_STATE_DESC)* pDesc,
        REFIID riid,
        ID3D12PipelineState* ppPipelineState);

    HRESULT CreateCommandList(
        UINT nodeMask,
        D3D12_COMMAND_LIST_TYPE type,
        ID3D12CommandAllocator pCommandAllocator,
        ID3D12PipelineState pInitialState,
        REFIID riid,
        ID3D12CommandList* ppCommandList);

    HRESULT CheckFeatureSupport(
        D3D12_FEATURE Feature,
        void* pFeatureSupportData,
        UINT FeatureSupportDataSize);

    HRESULT CreateDescriptorHeap(
        const(D3D12_DESCRIPTOR_HEAP_DESC)* pDescriptorHeapDesc,
        REFIID riid,
        ID3D12DescriptorHeap* ppvHeap);

    UINT GetDescriptorHandleIncrementSize(
        D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

    HRESULT CreateRootSignature(
        UINT nodeMask,
        const(void)* pBlobWithRootSignature,
        SIZE_T blobLengthInBytes,
        REFIID riid,
        ID3D12RootSignature* ppvRootSignature);

    void CreateConstantBufferView(
        const(D3D12_CONSTANT_BUFFER_VIEW_DESC)* pDesc,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateShaderResourceView(
        ID3D12Resource pResource,
        const(D3D12_SHADER_RESOURCE_VIEW_DESC)* pDesc,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateUnorderedAccessView(
        ID3D12Resource pResource,
        ID3D12Resource pCounterResource,
        const(D3D12_UNORDERED_ACCESS_VIEW_DESC)* pDesc,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateRenderTargetView(
        ID3D12Resource pResource,
        const(D3D12_RENDER_TARGET_VIEW_DESC)* pDesc,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateDepthStencilView(
        ID3D12Resource pResource,
        const(D3D12_DEPTH_STENCIL_VIEW_DESC)* pDesc,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CreateSampler(
        const(D3D12_SAMPLER_DESC)* pDesc,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

    void CopyDescriptors(
        UINT NumDestDescriptorRanges,
        const(D3D12_CPU_DESCRIPTOR_HANDLE)* pDestDescriptorRangeStarts,
        const(UINT)* pDestDescriptorRangeSizes,
        UINT NumSrcDescriptorRanges,
        const(D3D12_CPU_DESCRIPTOR_HANDLE)* pSrcDescriptorRangeStarts,
        const(UINT)* pSrcDescriptorRangeSizes,
        D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

    void CopyDescriptorsSimple(
        UINT NumDescriptors,
        D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart,
        D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart,
        D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

	version(CORRECT_ABI)
	{
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(
        UINT visibleMask,
        UINT numResourceDescs,
        const(D3D12_RESOURCE_DESC)* pResourceDescs);

    D3D12_HEAP_PROPERTIES GetCustomHeapProperties(
        UINT nodeMask,
        D3D12_HEAP_TYPE heapType);
	}
	else
	{
		void GetResourceAllocationInfo(D3D12_RESOURCE_ALLOCATION_INFO* outDesc,
									   UINT visibleMask,
									   UINT numResourceDescs,
									   const(D3D12_RESOURCE_DESC)* pResourceDescs);

		void GetCustomHeapProperties(D3D12_HEAP_PROPERTIES* outDesc,
									 UINT nodeMask,
									 D3D12_HEAP_TYPE heapType);
	}


    HRESULT CreateCommittedResource(
        const(D3D12_HEAP_PROPERTIES)* pHeapProperties,
        D3D12_HEAP_FLAGS HeapFlags,
        const(D3D12_RESOURCE_DESC)* pResourceDesc,
        D3D12_RESOURCE_STATES InitialResourceState,
        const(D3D12_CLEAR_VALUE)* pOptimizedClearValue,
        REFIID riidResource,
        ID3D12Resource* ppvResource);

    HRESULT CreateHeap(
        const(D3D12_HEAP_DESC)* pDesc,
        REFIID riid,
        ID3D12Heap* ppvHeap);

    HRESULT CreatePlacedResource(
        ID3D12Heap pHeap,
        UINT64 HeapOffset,
        const(D3D12_RESOURCE_DESC)* pDesc,
        D3D12_RESOURCE_STATES InitialState,
        const(D3D12_CLEAR_VALUE)* pOptimizedClearValue,
        REFIID riid,
        ID3D12Resource* ppvResource);

    HRESULT CreateReservedResource(
        const(D3D12_RESOURCE_DESC)* pDesc,
        D3D12_RESOURCE_STATES InitialState,
        const(D3D12_CLEAR_VALUE)* pOptimizedClearValue,
        REFIID riid,
        ID3D12Resource* ppvResource);

    HRESULT CreateSharedHandle(
        ID3D12DeviceChild pObject,
        const(SECURITY_ATTRIBUTES)* pAttributes,
        DWORD Access,
        LPCWSTR Name,
        HANDLE* pHandle);

    HRESULT OpenSharedHandle(
        HANDLE NTHandle,
        REFIID riid,
        void** ppvObj);

    HRESULT OpenSharedHandleByName(
        LPCWSTR Name,
        DWORD Access,
        HANDLE* pNTHandle);

    HRESULT MakeResident(
        UINT NumObjects,
        const(ID3D12Pageable)* ppObjects);

    HRESULT Evict(
        UINT NumObjects,
        const(ID3D12Pageable)* ppObjects);

    HRESULT CreateFence(
        UINT64 InitialValue,
        D3D12_FENCE_FLAGS Flags,
        REFIID riid,
        ID3D12Fence* ppFence);

    HRESULT GetDeviceRemovedReason();

    void GetCopyableFootprints(
        const(D3D12_RESOURCE_DESC)* pResourceDesc,
        UINT FirstSubresource,
        UINT NumSubresources,
        UINT64 BaseOffset,
        D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts,
        UINT* pNumRows,
        UINT64* pRowSizeInBytes,
        UINT64* pTotalBytes);

    HRESULT CreateQueryHeap(
        const(D3D12_QUERY_HEAP_DESC)* pDesc,
        REFIID riid,
        ID3D12QueryHeap* ppvHeap);

    HRESULT SetStablePowerState(
        BOOL Enable);

    HRESULT CreateCommandSignature(
        const(D3D12_COMMAND_SIGNATURE_DESC)* pDesc,
        ID3D12RootSignature pRootSignature,
        REFIID riid,
        ID3D12CommandSignature* ppvCommandSignature);

    void GetResourceTiling(
        ID3D12Resource pTiledResource,
        UINT* pNumTilesForEntireResource,
        D3D12_PACKED_MIP_INFO* pPackedMipDesc,
        D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips,
        UINT* pNumSubresourceTilings,
        UINT FirstSubresourceTilingToGet,
        D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

    LUID GetAdapterLuid();


	version(CORRECT_ABI){}
	else
	{
		final D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(
																 UINT visibleMask,
																 UINT numResourceDescs,
																 const(D3D12_RESOURCE_DESC)* pResourceDescs)
		{
			D3D12_RESOURCE_ALLOCATION_INFO temp;
			GetResourceAllocationInfo(&temp, visibleMask, numResourceDescs, pResourceDescs);
			return temp;
		}

		final D3D12_HEAP_PROPERTIES GetCustomHeapProperties(
													  UINT nodeMask,
													  D3D12_HEAP_TYPE heapType)
		{
			D3D12_HEAP_PROPERTIES temp;
			GetCustomHeapProperties(nodeMask, heapType);
			return temp;
		}
	}
}

struct D3D12_SUBRESOURCE_DATA {
    const(void)* pData;
    LONG_PTR     RowPitch;
    LONG_PTR     SlicePitch;
}

struct D3D12_MEMCPY_DEST {
    void*  pData;
    SIZE_T RowPitch;
    SIZE_T SlicePitch;
}

///////////////////////////////////////////////////////////////////////////
// D3D12CreateDevice
// ------------------
//
// pAdapter
//      If NULL, D3D12CreateDevice will choose the primary adapter.
//      If non-NULL, D3D12CreateDevice will use the provided adapter.
// MinimumFeatureLevel
//      The minimum feature level required for successful device creation.
// riid
//      The interface IID of the device to be returned. Expected: ID3D12Device.
// ppDevice
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          D3D12CreateDevice
//
///////////////////////////////////////////////////////////////////////////


extern(Windows) nothrow HRESULT D3D12CreateDevice(
                         IUnknown          pAdapter,
                         D3D_FEATURE_LEVEL MinimumFeatureLevel,
                         REFIID            riid, // Expected: ID3D12Device
                         ID3D12Device     *ppDevice);

extern(Windows) nothrow HRESULT D3D12GetDebugInterface(
                         REFIID riid,
                         void** ppvDebug);


alias PFN_D3D12_CREATE_DEVICE = extern(Windows) nothrow HRESULT function(
                         IUnknown          pAdapter,
                         D3D_FEATURE_LEVEL MinimumFeatureLevel,
                         REFIID            riid, // Expected: ID3D12Device
                         ID3D12Device     *ppDevice);

alias PFN_D3D12_GET_DEBUG_INTERFACE = extern(Windows) nothrow HRESULT function(
                         REFIID riid,
                         void** ppvDebug);

