module gles.gl31;

version(GLES31):
import core.stdc.config;

extern (C):

enum __gl31_h_ = 1;

/*
** Copyright (c) 2013-2016 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/
/*
** This header is generated from the Khronos OpenGL / OpenGL ES XML
** API Registry. The current version of the Registry, generator scripts
** used to make the header, and the header can be found at
**   http://www.opengl.org/registry/
**
** Khronos $Revision$ on $Date$
*/

enum GL_GLES_PROTOTYPES = 1;

/* Generated on date 20161024 */

/* Generated C header for:
 * API: gles2
 * Profile: common
 * Versions considered: 2\.[0-9]|3\.[01]
 * Versions emitted: .*
 * Default extensions included: None
 * Additional extensions included: _nomatch_^
 * Extensions removed: _nomatch_^
 */

enum GL_ES_VERSION_2_0 = 1;

alias GLbyte = byte;
alias GLclampf = float;
alias GLfixed = int;
alias GLshort = short;
alias GLushort = ushort;
alias GLvoid = void;
struct __GLsync;
alias GLsync = __GLsync*;
alias GLint64 = long;
alias GLuint64 = ulong;
alias GLenum = uint;
alias GLuint = uint;
alias GLchar = char;
alias GLfloat = float;
alias GLsizeiptr = c_long;
alias GLintptr = c_long;
alias GLbitfield = uint;
alias GLint = int;
alias GLboolean = ubyte;
alias GLsizei = int;
alias GLubyte = ubyte;
enum GL_DEPTH_BUFFER_BIT = 0x00000100;
enum GL_STENCIL_BUFFER_BIT = 0x00000400;
enum GL_COLOR_BUFFER_BIT = 0x00004000;
enum GL_FALSE = 0;
enum GL_TRUE = 1;
enum GL_POINTS = 0x0000;
enum GL_LINES = 0x0001;
enum GL_LINE_LOOP = 0x0002;
enum GL_LINE_STRIP = 0x0003;
enum GL_TRIANGLES = 0x0004;
enum GL_TRIANGLE_STRIP = 0x0005;
enum GL_TRIANGLE_FAN = 0x0006;
enum GL_ZERO = 0;
enum GL_ONE = 1;
enum GL_SRC_COLOR = 0x0300;
enum GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum GL_SRC_ALPHA = 0x0302;
enum GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum GL_DST_ALPHA = 0x0304;
enum GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum GL_DST_COLOR = 0x0306;
enum GL_ONE_MINUS_DST_COLOR = 0x0307;
enum GL_SRC_ALPHA_SATURATE = 0x0308;
enum GL_FUNC_ADD = 0x8006;
enum GL_BLEND_EQUATION = 0x8009;
enum GL_BLEND_EQUATION_RGB = 0x8009;
enum GL_BLEND_EQUATION_ALPHA = 0x883D;
enum GL_FUNC_SUBTRACT = 0x800A;
enum GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum GL_BLEND_DST_RGB = 0x80C8;
enum GL_BLEND_SRC_RGB = 0x80C9;
enum GL_BLEND_DST_ALPHA = 0x80CA;
enum GL_BLEND_SRC_ALPHA = 0x80CB;
enum GL_CONSTANT_COLOR = 0x8001;
enum GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum GL_CONSTANT_ALPHA = 0x8003;
enum GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
enum GL_BLEND_COLOR = 0x8005;
enum GL_ARRAY_BUFFER = 0x8892;
enum GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum GL_ARRAY_BUFFER_BINDING = 0x8894;
enum GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum GL_STREAM_DRAW = 0x88E0;
enum GL_STATIC_DRAW = 0x88E4;
enum GL_DYNAMIC_DRAW = 0x88E8;
enum GL_BUFFER_SIZE = 0x8764;
enum GL_BUFFER_USAGE = 0x8765;
enum GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum GL_FRONT = 0x0404;
enum GL_BACK = 0x0405;
enum GL_FRONT_AND_BACK = 0x0408;
enum GL_TEXTURE_2D = 0x0DE1;
enum GL_CULL_FACE = 0x0B44;
enum GL_BLEND = 0x0BE2;
enum GL_DITHER = 0x0BD0;
enum GL_STENCIL_TEST = 0x0B90;
enum GL_DEPTH_TEST = 0x0B71;
enum GL_SCISSOR_TEST = 0x0C11;
enum GL_POLYGON_OFFSET_FILL = 0x8037;
enum GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum GL_SAMPLE_COVERAGE = 0x80A0;
enum GL_NO_ERROR = 0;
enum GL_INVALID_ENUM = 0x0500;
enum GL_INVALID_VALUE = 0x0501;
enum GL_INVALID_OPERATION = 0x0502;
enum GL_OUT_OF_MEMORY = 0x0505;
enum GL_CW = 0x0900;
enum GL_CCW = 0x0901;
enum GL_LINE_WIDTH = 0x0B21;
enum GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
enum GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
enum GL_CULL_FACE_MODE = 0x0B45;
enum GL_FRONT_FACE = 0x0B46;
enum GL_DEPTH_RANGE = 0x0B70;
enum GL_DEPTH_WRITEMASK = 0x0B72;
enum GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum GL_DEPTH_FUNC = 0x0B74;
enum GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum GL_STENCIL_FUNC = 0x0B92;
enum GL_STENCIL_FAIL = 0x0B94;
enum GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum GL_STENCIL_REF = 0x0B97;
enum GL_STENCIL_VALUE_MASK = 0x0B93;
enum GL_STENCIL_WRITEMASK = 0x0B98;
enum GL_STENCIL_BACK_FUNC = 0x8800;
enum GL_STENCIL_BACK_FAIL = 0x8801;
enum GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum GL_STENCIL_BACK_REF = 0x8CA3;
enum GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
enum GL_VIEWPORT = 0x0BA2;
enum GL_SCISSOR_BOX = 0x0C10;
enum GL_COLOR_CLEAR_VALUE = 0x0C22;
enum GL_COLOR_WRITEMASK = 0x0C23;
enum GL_UNPACK_ALIGNMENT = 0x0CF5;
enum GL_PACK_ALIGNMENT = 0x0D05;
enum GL_MAX_TEXTURE_SIZE = 0x0D33;
enum GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum GL_SUBPIXEL_BITS = 0x0D50;
enum GL_RED_BITS = 0x0D52;
enum GL_GREEN_BITS = 0x0D53;
enum GL_BLUE_BITS = 0x0D54;
enum GL_ALPHA_BITS = 0x0D55;
enum GL_DEPTH_BITS = 0x0D56;
enum GL_STENCIL_BITS = 0x0D57;
enum GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum GL_TEXTURE_BINDING_2D = 0x8069;
enum GL_SAMPLE_BUFFERS = 0x80A8;
enum GL_SAMPLES = 0x80A9;
enum GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum GL_DONT_CARE = 0x1100;
enum GL_FASTEST = 0x1101;
enum GL_NICEST = 0x1102;
enum GL_GENERATE_MIPMAP_HINT = 0x8192;
enum GL_BYTE = 0x1400;
enum GL_UNSIGNED_BYTE = 0x1401;
enum GL_SHORT = 0x1402;
enum GL_UNSIGNED_SHORT = 0x1403;
enum GL_INT = 0x1404;
enum GL_UNSIGNED_INT = 0x1405;
enum GL_FLOAT = 0x1406;
enum GL_FIXED = 0x140C;
enum GL_DEPTH_COMPONENT = 0x1902;
enum GL_ALPHA = 0x1906;
enum GL_RGB = 0x1907;
enum GL_RGBA = 0x1908;
enum GL_LUMINANCE = 0x1909;
enum GL_LUMINANCE_ALPHA = 0x190A;
enum GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum GL_FRAGMENT_SHADER = 0x8B30;
enum GL_VERTEX_SHADER = 0x8B31;
enum GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
enum GL_MAX_VARYING_VECTORS = 0x8DFC;
enum GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
enum GL_SHADER_TYPE = 0x8B4F;
enum GL_DELETE_STATUS = 0x8B80;
enum GL_LINK_STATUS = 0x8B82;
enum GL_VALIDATE_STATUS = 0x8B83;
enum GL_ATTACHED_SHADERS = 0x8B85;
enum GL_ACTIVE_UNIFORMS = 0x8B86;
enum GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum GL_CURRENT_PROGRAM = 0x8B8D;
enum GL_NEVER = 0x0200;
enum GL_LESS = 0x0201;
enum GL_EQUAL = 0x0202;
enum GL_LEQUAL = 0x0203;
enum GL_GREATER = 0x0204;
enum GL_NOTEQUAL = 0x0205;
enum GL_GEQUAL = 0x0206;
enum GL_ALWAYS = 0x0207;
enum GL_KEEP = 0x1E00;
enum GL_REPLACE = 0x1E01;
enum GL_INCR = 0x1E02;
enum GL_DECR = 0x1E03;
enum GL_INVERT = 0x150A;
enum GL_INCR_WRAP = 0x8507;
enum GL_DECR_WRAP = 0x8508;
enum GL_VENDOR = 0x1F00;
enum GL_RENDERER = 0x1F01;
enum GL_VERSION = 0x1F02;
enum GL_EXTENSIONS = 0x1F03;
enum GL_NEAREST = 0x2600;
enum GL_LINEAR = 0x2601;
enum GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum GL_TEXTURE_MAG_FILTER = 0x2800;
enum GL_TEXTURE_MIN_FILTER = 0x2801;
enum GL_TEXTURE_WRAP_S = 0x2802;
enum GL_TEXTURE_WRAP_T = 0x2803;
enum GL_TEXTURE = 0x1702;
enum GL_TEXTURE_CUBE_MAP = 0x8513;
enum GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum GL_TEXTURE0 = 0x84C0;
enum GL_TEXTURE1 = 0x84C1;
enum GL_TEXTURE2 = 0x84C2;
enum GL_TEXTURE3 = 0x84C3;
enum GL_TEXTURE4 = 0x84C4;
enum GL_TEXTURE5 = 0x84C5;
enum GL_TEXTURE6 = 0x84C6;
enum GL_TEXTURE7 = 0x84C7;
enum GL_TEXTURE8 = 0x84C8;
enum GL_TEXTURE9 = 0x84C9;
enum GL_TEXTURE10 = 0x84CA;
enum GL_TEXTURE11 = 0x84CB;
enum GL_TEXTURE12 = 0x84CC;
enum GL_TEXTURE13 = 0x84CD;
enum GL_TEXTURE14 = 0x84CE;
enum GL_TEXTURE15 = 0x84CF;
enum GL_TEXTURE16 = 0x84D0;
enum GL_TEXTURE17 = 0x84D1;
enum GL_TEXTURE18 = 0x84D2;
enum GL_TEXTURE19 = 0x84D3;
enum GL_TEXTURE20 = 0x84D4;
enum GL_TEXTURE21 = 0x84D5;
enum GL_TEXTURE22 = 0x84D6;
enum GL_TEXTURE23 = 0x84D7;
enum GL_TEXTURE24 = 0x84D8;
enum GL_TEXTURE25 = 0x84D9;
enum GL_TEXTURE26 = 0x84DA;
enum GL_TEXTURE27 = 0x84DB;
enum GL_TEXTURE28 = 0x84DC;
enum GL_TEXTURE29 = 0x84DD;
enum GL_TEXTURE30 = 0x84DE;
enum GL_TEXTURE31 = 0x84DF;
enum GL_ACTIVE_TEXTURE = 0x84E0;
enum GL_REPEAT = 0x2901;
enum GL_CLAMP_TO_EDGE = 0x812F;
enum GL_MIRRORED_REPEAT = 0x8370;
enum GL_FLOAT_VEC2 = 0x8B50;
enum GL_FLOAT_VEC3 = 0x8B51;
enum GL_FLOAT_VEC4 = 0x8B52;
enum GL_INT_VEC2 = 0x8B53;
enum GL_INT_VEC3 = 0x8B54;
enum GL_INT_VEC4 = 0x8B55;
enum GL_BOOL = 0x8B56;
enum GL_BOOL_VEC2 = 0x8B57;
enum GL_BOOL_VEC3 = 0x8B58;
enum GL_BOOL_VEC4 = 0x8B59;
enum GL_FLOAT_MAT2 = 0x8B5A;
enum GL_FLOAT_MAT3 = 0x8B5B;
enum GL_FLOAT_MAT4 = 0x8B5C;
enum GL_SAMPLER_2D = 0x8B5E;
enum GL_SAMPLER_CUBE = 0x8B60;
enum GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
enum GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
enum GL_COMPILE_STATUS = 0x8B81;
enum GL_INFO_LOG_LENGTH = 0x8B84;
enum GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum GL_SHADER_COMPILER = 0x8DFA;
enum GL_SHADER_BINARY_FORMATS = 0x8DF8;
enum GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
enum GL_LOW_FLOAT = 0x8DF0;
enum GL_MEDIUM_FLOAT = 0x8DF1;
enum GL_HIGH_FLOAT = 0x8DF2;
enum GL_LOW_INT = 0x8DF3;
enum GL_MEDIUM_INT = 0x8DF4;
enum GL_HIGH_INT = 0x8DF5;
enum GL_FRAMEBUFFER = 0x8D40;
enum GL_RENDERBUFFER = 0x8D41;
enum GL_RGBA4 = 0x8056;
enum GL_RGB5_A1 = 0x8057;
enum GL_RGB565 = 0x8D62;
enum GL_DEPTH_COMPONENT16 = 0x81A5;
enum GL_STENCIL_INDEX8 = 0x8D48;
enum GL_RENDERBUFFER_WIDTH = 0x8D42;
enum GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum GL_DEPTH_ATTACHMENT = 0x8D00;
enum GL_STENCIL_ATTACHMENT = 0x8D20;
enum GL_NONE = 0;
enum GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
enum GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum GL_RENDERBUFFER_BINDING = 0x8CA7;
enum GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
alias PFNGLACTIVETEXTUREPROC = void function (GLenum texture);
alias PFNGLATTACHSHADERPROC = void function (GLuint program, GLuint shader);
alias PFNGLBINDATTRIBLOCATIONPROC = void function (GLuint program, GLuint index, const(GLchar)* name);
alias PFNGLBINDBUFFERPROC = void function (GLenum target, GLuint buffer);
alias PFNGLBINDFRAMEBUFFERPROC = void function (GLenum target, GLuint framebuffer);
alias PFNGLBINDRENDERBUFFERPROC = void function (GLenum target, GLuint renderbuffer);
alias PFNGLBINDTEXTUREPROC = void function (GLenum target, GLuint texture);
alias PFNGLBLENDCOLORPROC = void function (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
alias PFNGLBLENDEQUATIONPROC = void function (GLenum mode);
alias PFNGLBLENDEQUATIONSEPARATEPROC = void function (GLenum modeRGB, GLenum modeAlpha);
alias PFNGLBLENDFUNCPROC = void function (GLenum sfactor, GLenum dfactor);
alias PFNGLBLENDFUNCSEPARATEPROC = void function (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
alias PFNGLBUFFERDATAPROC = void function (GLenum target, GLsizeiptr size, const(void)* data, GLenum usage);
alias PFNGLBUFFERSUBDATAPROC = void function (GLenum target, GLintptr offset, GLsizeiptr size, const(void)* data);
alias PFNGLCHECKFRAMEBUFFERSTATUSPROC = uint function (GLenum target);
alias PFNGLCLEARPROC = void function (GLbitfield mask);
alias PFNGLCLEARCOLORPROC = void function (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
alias PFNGLCLEARDEPTHFPROC = void function (GLfloat d);
alias PFNGLCLEARSTENCILPROC = void function (GLint s);
alias PFNGLCOLORMASKPROC = void function (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
alias PFNGLCOMPILESHADERPROC = void function (GLuint shader);
alias PFNGLCOMPRESSEDTEXIMAGE2DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data);
alias PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data);
alias PFNGLCOPYTEXIMAGE2DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
alias PFNGLCOPYTEXSUBIMAGE2DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
alias PFNGLCREATEPROGRAMPROC = uint function ();
alias PFNGLCREATESHADERPROC = uint function (GLenum type);
alias PFNGLCULLFACEPROC = void function (GLenum mode);
alias PFNGLDELETEBUFFERSPROC = void function (GLsizei n, const(GLuint)* buffers);
alias PFNGLDELETEFRAMEBUFFERSPROC = void function (GLsizei n, const(GLuint)* framebuffers);
alias PFNGLDELETEPROGRAMPROC = void function (GLuint program);
alias PFNGLDELETERENDERBUFFERSPROC = void function (GLsizei n, const(GLuint)* renderbuffers);
alias PFNGLDELETESHADERPROC = void function (GLuint shader);
alias PFNGLDELETETEXTURESPROC = void function (GLsizei n, const(GLuint)* textures);
alias PFNGLDEPTHFUNCPROC = void function (GLenum func);
alias PFNGLDEPTHMASKPROC = void function (GLboolean flag);
alias PFNGLDEPTHRANGEFPROC = void function (GLfloat n, GLfloat f);
alias PFNGLDETACHSHADERPROC = void function (GLuint program, GLuint shader);
alias PFNGLDISABLEPROC = void function (GLenum cap);
alias PFNGLDISABLEVERTEXATTRIBARRAYPROC = void function (GLuint index);
alias PFNGLDRAWARRAYSPROC = void function (GLenum mode, GLint first, GLsizei count);
alias PFNGLDRAWELEMENTSPROC = void function (GLenum mode, GLsizei count, GLenum type, const(void)* indices);
alias PFNGLENABLEPROC = void function (GLenum cap);
alias PFNGLENABLEVERTEXATTRIBARRAYPROC = void function (GLuint index);
alias PFNGLFINISHPROC = void function ();
alias PFNGLFLUSHPROC = void function ();
alias PFNGLFRAMEBUFFERRENDERBUFFERPROC = void function (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
alias PFNGLFRAMEBUFFERTEXTURE2DPROC = void function (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
alias PFNGLFRONTFACEPROC = void function (GLenum mode);
alias PFNGLGENBUFFERSPROC = void function (GLsizei n, GLuint* buffers);
alias PFNGLGENERATEMIPMAPPROC = void function (GLenum target);
alias PFNGLGENFRAMEBUFFERSPROC = void function (GLsizei n, GLuint* framebuffers);
alias PFNGLGENRENDERBUFFERSPROC = void function (GLsizei n, GLuint* renderbuffers);
alias PFNGLGENTEXTURESPROC = void function (GLsizei n, GLuint* textures);
alias PFNGLGETACTIVEATTRIBPROC = void function (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
alias PFNGLGETACTIVEUNIFORMPROC = void function (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
alias PFNGLGETATTACHEDSHADERSPROC = void function (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
alias PFNGLGETATTRIBLOCATIONPROC = int function (GLuint program, const(GLchar)* name);
alias PFNGLGETBOOLEANVPROC = void function (GLenum pname, GLboolean* data);
alias PFNGLGETBUFFERPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
alias PFNGLGETERRORPROC = uint function ();
alias PFNGLGETFLOATVPROC = void function (GLenum pname, GLfloat* data);
alias PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void function (GLenum target, GLenum attachment, GLenum pname, GLint* params);
alias PFNGLGETINTEGERVPROC = void function (GLenum pname, GLint* data);
alias PFNGLGETPROGRAMIVPROC = void function (GLuint program, GLenum pname, GLint* params);
alias PFNGLGETPROGRAMINFOLOGPROC = void function (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
alias PFNGLGETRENDERBUFFERPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
alias PFNGLGETSHADERIVPROC = void function (GLuint shader, GLenum pname, GLint* params);
alias PFNGLGETSHADERINFOLOGPROC = void function (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
alias PFNGLGETSHADERPRECISIONFORMATPROC = void function (GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
alias PFNGLGETSHADERSOURCEPROC = void function (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
alias PFNGLGETSTRINGPROC = const(ubyte)* function (GLenum name);
alias PFNGLGETTEXPARAMETERFVPROC = void function (GLenum target, GLenum pname, GLfloat* params);
alias PFNGLGETTEXPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
alias PFNGLGETUNIFORMFVPROC = void function (GLuint program, GLint location, GLfloat* params);
alias PFNGLGETUNIFORMIVPROC = void function (GLuint program, GLint location, GLint* params);
alias PFNGLGETUNIFORMLOCATIONPROC = int function (GLuint program, const(GLchar)* name);
alias PFNGLGETVERTEXATTRIBFVPROC = void function (GLuint index, GLenum pname, GLfloat* params);
alias PFNGLGETVERTEXATTRIBIVPROC = void function (GLuint index, GLenum pname, GLint* params);
alias PFNGLGETVERTEXATTRIBPOINTERVPROC = void function (GLuint index, GLenum pname, void** pointer);
alias PFNGLHINTPROC = void function (GLenum target, GLenum mode);
alias PFNGLISBUFFERPROC = ubyte function (GLuint buffer);
alias PFNGLISENABLEDPROC = ubyte function (GLenum cap);
alias PFNGLISFRAMEBUFFERPROC = ubyte function (GLuint framebuffer);
alias PFNGLISPROGRAMPROC = ubyte function (GLuint program);
alias PFNGLISRENDERBUFFERPROC = ubyte function (GLuint renderbuffer);
alias PFNGLISSHADERPROC = ubyte function (GLuint shader);
alias PFNGLISTEXTUREPROC = ubyte function (GLuint texture);
alias PFNGLLINEWIDTHPROC = void function (GLfloat width);
alias PFNGLLINKPROGRAMPROC = void function (GLuint program);
alias PFNGLPIXELSTOREIPROC = void function (GLenum pname, GLint param);
alias PFNGLPOLYGONOFFSETPROC = void function (GLfloat factor, GLfloat units);
alias PFNGLREADPIXELSPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
alias PFNGLRELEASESHADERCOMPILERPROC = void function ();
alias PFNGLRENDERBUFFERSTORAGEPROC = void function (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
alias PFNGLSAMPLECOVERAGEPROC = void function (GLfloat value, GLboolean invert);
alias PFNGLSCISSORPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height);
alias PFNGLSHADERBINARYPROC = void function (GLsizei count, const(GLuint)* shaders, GLenum binaryformat, const(void)* binary, GLsizei length);
alias PFNGLSHADERSOURCEPROC = void function (GLuint shader, GLsizei count, const(GLchar*)* string, const(GLint)* length);
alias PFNGLSTENCILFUNCPROC = void function (GLenum func, GLint ref_, GLuint mask);
alias PFNGLSTENCILFUNCSEPARATEPROC = void function (GLenum face, GLenum func, GLint ref_, GLuint mask);
alias PFNGLSTENCILMASKPROC = void function (GLuint mask);
alias PFNGLSTENCILMASKSEPARATEPROC = void function (GLenum face, GLuint mask);
alias PFNGLSTENCILOPPROC = void function (GLenum fail, GLenum zfail, GLenum zpass);
alias PFNGLSTENCILOPSEPARATEPROC = void function (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
alias PFNGLTEXIMAGE2DPROC = void function (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels);
alias PFNGLTEXPARAMETERFPROC = void function (GLenum target, GLenum pname, GLfloat param);
alias PFNGLTEXPARAMETERFVPROC = void function (GLenum target, GLenum pname, const(GLfloat)* params);
alias PFNGLTEXPARAMETERIPROC = void function (GLenum target, GLenum pname, GLint param);
alias PFNGLTEXPARAMETERIVPROC = void function (GLenum target, GLenum pname, const(GLint)* params);
alias PFNGLTEXSUBIMAGE2DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels);
alias PFNGLUNIFORM1FPROC = void function (GLint location, GLfloat v0);
alias PFNGLUNIFORM1FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLUNIFORM1IPROC = void function (GLint location, GLint v0);
alias PFNGLUNIFORM1IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
alias PFNGLUNIFORM2FPROC = void function (GLint location, GLfloat v0, GLfloat v1);
alias PFNGLUNIFORM2FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLUNIFORM2IPROC = void function (GLint location, GLint v0, GLint v1);
alias PFNGLUNIFORM2IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
alias PFNGLUNIFORM3FPROC = void function (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
alias PFNGLUNIFORM3FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLUNIFORM3IPROC = void function (GLint location, GLint v0, GLint v1, GLint v2);
alias PFNGLUNIFORM3IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
alias PFNGLUNIFORM4FPROC = void function (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
alias PFNGLUNIFORM4FVPROC = void function (GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLUNIFORM4IPROC = void function (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
alias PFNGLUNIFORM4IVPROC = void function (GLint location, GLsizei count, const(GLint)* value);
alias PFNGLUNIFORMMATRIX2FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX3FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX4FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUSEPROGRAMPROC = void function (GLuint program);
alias PFNGLVALIDATEPROGRAMPROC = void function (GLuint program);
alias PFNGLVERTEXATTRIB1FPROC = void function (GLuint index, GLfloat x);
alias PFNGLVERTEXATTRIB1FVPROC = void function (GLuint index, const(GLfloat)* v);
alias PFNGLVERTEXATTRIB2FPROC = void function (GLuint index, GLfloat x, GLfloat y);
alias PFNGLVERTEXATTRIB2FVPROC = void function (GLuint index, const(GLfloat)* v);
alias PFNGLVERTEXATTRIB3FPROC = void function (GLuint index, GLfloat x, GLfloat y, GLfloat z);
alias PFNGLVERTEXATTRIB3FVPROC = void function (GLuint index, const(GLfloat)* v);
alias PFNGLVERTEXATTRIB4FPROC = void function (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
alias PFNGLVERTEXATTRIB4FVPROC = void function (GLuint index, const(GLfloat)* v);
alias PFNGLVERTEXATTRIBPOINTERPROC = void function (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer);
alias PFNGLVIEWPORTPROC = void function (GLint x, GLint y, GLsizei width, GLsizei height);
void glActiveTexture (GLenum texture);
void glAttachShader (GLuint program, GLuint shader);
void glBindAttribLocation (GLuint program, GLuint index, const(GLchar)* name);
void glBindBuffer (GLenum target, GLuint buffer);
void glBindFramebuffer (GLenum target, GLuint framebuffer);
void glBindRenderbuffer (GLenum target, GLuint renderbuffer);
void glBindTexture (GLenum target, GLuint texture);
void glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glBlendEquation (GLenum mode);
void glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
void glBlendFunc (GLenum sfactor, GLenum dfactor);
void glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void glBufferData (GLenum target, GLsizeiptr size, const(void)* data, GLenum usage);
void glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const(void)* data);
GLenum glCheckFramebufferStatus (GLenum target);
void glClear (GLbitfield mask);
void glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glClearDepthf (GLfloat d);
void glClearStencil (GLint s);
void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glCompileShader (GLuint shader);
void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(void)* data);
void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(void)* data);
void glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLuint glCreateProgram ();
GLuint glCreateShader (GLenum type);
void glCullFace (GLenum mode);
void glDeleteBuffers (GLsizei n, const(GLuint)* buffers);
void glDeleteFramebuffers (GLsizei n, const(GLuint)* framebuffers);
void glDeleteProgram (GLuint program);
void glDeleteRenderbuffers (GLsizei n, const(GLuint)* renderbuffers);
void glDeleteShader (GLuint shader);
void glDeleteTextures (GLsizei n, const(GLuint)* textures);
void glDepthFunc (GLenum func);
void glDepthMask (GLboolean flag);
void glDepthRangef (GLfloat n, GLfloat f);
void glDetachShader (GLuint program, GLuint shader);
void glDisable (GLenum cap);
void glDisableVertexAttribArray (GLuint index);
void glDrawArrays (GLenum mode, GLint first, GLsizei count);
void glDrawElements (GLenum mode, GLsizei count, GLenum type, const(void)* indices);
void glEnable (GLenum cap);
void glEnableVertexAttribArray (GLuint index);
void glFinish ();
void glFlush ();
void glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFrontFace (GLenum mode);
void glGenBuffers (GLsizei n, GLuint* buffers);
void glGenerateMipmap (GLenum target);
void glGenFramebuffers (GLsizei n, GLuint* framebuffers);
void glGenRenderbuffers (GLsizei n, GLuint* renderbuffers);
void glGenTextures (GLsizei n, GLuint* textures);
void glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLint glGetAttribLocation (GLuint program, const(GLchar)* name);
void glGetBooleanv (GLenum pname, GLboolean* data);
void glGetBufferParameteriv (GLenum target, GLenum pname, GLint* params);
GLenum glGetError ();
void glGetFloatv (GLenum pname, GLfloat* data);
void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint* params);
void glGetIntegerv (GLenum pname, GLint* data);
void glGetProgramiv (GLuint program, GLenum pname, GLint* params);
void glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint* params);
void glGetShaderiv (GLuint shader, GLenum pname, GLint* params);
void glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
void glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
const(GLubyte)* glGetString (GLenum name);
void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat* params);
void glGetTexParameteriv (GLenum target, GLenum pname, GLint* params);
void glGetUniformfv (GLuint program, GLint location, GLfloat* params);
void glGetUniformiv (GLuint program, GLint location, GLint* params);
GLint glGetUniformLocation (GLuint program, const(GLchar)* name);
void glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat* params);
void glGetVertexAttribiv (GLuint index, GLenum pname, GLint* params);
void glGetVertexAttribPointerv (GLuint index, GLenum pname, void** pointer);
void glHint (GLenum target, GLenum mode);
GLboolean glIsBuffer (GLuint buffer);
GLboolean glIsEnabled (GLenum cap);
GLboolean glIsFramebuffer (GLuint framebuffer);
GLboolean glIsProgram (GLuint program);
GLboolean glIsRenderbuffer (GLuint renderbuffer);
GLboolean glIsShader (GLuint shader);
GLboolean glIsTexture (GLuint texture);
void glLineWidth (GLfloat width);
void glLinkProgram (GLuint program);
void glPixelStorei (GLenum pname, GLint param);
void glPolygonOffset (GLfloat factor, GLfloat units);
void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
void glReleaseShaderCompiler ();
void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glSampleCoverage (GLfloat value, GLboolean invert);
void glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
void glShaderBinary (GLsizei count, const(GLuint)* shaders, GLenum binaryformat, const(void)* binary, GLsizei length);
void glShaderSource (GLuint shader, GLsizei count, const(GLchar*)* string, const(GLint)* length);
void glStencilFunc (GLenum func, GLint ref_, GLuint mask);
void glStencilFuncSeparate (GLenum face, GLenum func, GLint ref_, GLuint mask);
void glStencilMask (GLuint mask);
void glStencilMaskSeparate (GLenum face, GLuint mask);
void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
void glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(void)* pixels);
void glTexParameterf (GLenum target, GLenum pname, GLfloat param);
void glTexParameterfv (GLenum target, GLenum pname, const(GLfloat)* params);
void glTexParameteri (GLenum target, GLenum pname, GLint param);
void glTexParameteriv (GLenum target, GLenum pname, const(GLint)* params);
void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(void)* pixels);
void glUniform1f (GLint location, GLfloat v0);
void glUniform1fv (GLint location, GLsizei count, const(GLfloat)* value);
void glUniform1i (GLint location, GLint v0);
void glUniform1iv (GLint location, GLsizei count, const(GLint)* value);
void glUniform2f (GLint location, GLfloat v0, GLfloat v1);
void glUniform2fv (GLint location, GLsizei count, const(GLfloat)* value);
void glUniform2i (GLint location, GLint v0, GLint v1);
void glUniform2iv (GLint location, GLsizei count, const(GLint)* value);
void glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform3fv (GLint location, GLsizei count, const(GLfloat)* value);
void glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
void glUniform3iv (GLint location, GLsizei count, const(GLint)* value);
void glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform4fv (GLint location, GLsizei count, const(GLfloat)* value);
void glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform4iv (GLint location, GLsizei count, const(GLint)* value);
void glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUseProgram (GLuint program);
void glValidateProgram (GLuint program);
void glVertexAttrib1f (GLuint index, GLfloat x);
void glVertexAttrib1fv (GLuint index, const(GLfloat)* v);
void glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
void glVertexAttrib2fv (GLuint index, const(GLfloat)* v);
void glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3fv (GLuint index, const(GLfloat)* v);
void glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4fv (GLuint index, const(GLfloat)* v);
void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(void)* pointer);
void glViewport (GLint x, GLint y, GLsizei width, GLsizei height);

/* GL_ES_VERSION_2_0 */

enum GL_ES_VERSION_3_0 = 1;
alias GLhalf = ushort;
enum GL_READ_BUFFER = 0x0C02;
enum GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum GL_PACK_ROW_LENGTH = 0x0D02;
enum GL_PACK_SKIP_ROWS = 0x0D03;
enum GL_PACK_SKIP_PIXELS = 0x0D04;
enum GL_COLOR = 0x1800;
enum GL_DEPTH = 0x1801;
enum GL_STENCIL = 0x1802;
enum GL_RED = 0x1903;
enum GL_RGB8 = 0x8051;
enum GL_RGBA8 = 0x8058;
enum GL_RGB10_A2 = 0x8059;
enum GL_TEXTURE_BINDING_3D = 0x806A;
enum GL_UNPACK_SKIP_IMAGES = 0x806D;
enum GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum GL_TEXTURE_3D = 0x806F;
enum GL_TEXTURE_WRAP_R = 0x8072;
enum GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum GL_TEXTURE_MIN_LOD = 0x813A;
enum GL_TEXTURE_MAX_LOD = 0x813B;
enum GL_TEXTURE_BASE_LEVEL = 0x813C;
enum GL_TEXTURE_MAX_LEVEL = 0x813D;
enum GL_MIN = 0x8007;
enum GL_MAX = 0x8008;
enum GL_DEPTH_COMPONENT24 = 0x81A6;
enum GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum GL_TEXTURE_COMPARE_MODE = 0x884C;
enum GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum GL_CURRENT_QUERY = 0x8865;
enum GL_QUERY_RESULT = 0x8866;
enum GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum GL_BUFFER_MAPPED = 0x88BC;
enum GL_BUFFER_MAP_POINTER = 0x88BD;
enum GL_STREAM_READ = 0x88E1;
enum GL_STREAM_COPY = 0x88E2;
enum GL_STATIC_READ = 0x88E5;
enum GL_STATIC_COPY = 0x88E6;
enum GL_DYNAMIC_READ = 0x88E9;
enum GL_DYNAMIC_COPY = 0x88EA;
enum GL_MAX_DRAW_BUFFERS = 0x8824;
enum GL_DRAW_BUFFER0 = 0x8825;
enum GL_DRAW_BUFFER1 = 0x8826;
enum GL_DRAW_BUFFER2 = 0x8827;
enum GL_DRAW_BUFFER3 = 0x8828;
enum GL_DRAW_BUFFER4 = 0x8829;
enum GL_DRAW_BUFFER5 = 0x882A;
enum GL_DRAW_BUFFER6 = 0x882B;
enum GL_DRAW_BUFFER7 = 0x882C;
enum GL_DRAW_BUFFER8 = 0x882D;
enum GL_DRAW_BUFFER9 = 0x882E;
enum GL_DRAW_BUFFER10 = 0x882F;
enum GL_DRAW_BUFFER11 = 0x8830;
enum GL_DRAW_BUFFER12 = 0x8831;
enum GL_DRAW_BUFFER13 = 0x8832;
enum GL_DRAW_BUFFER14 = 0x8833;
enum GL_DRAW_BUFFER15 = 0x8834;
enum GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum GL_SAMPLER_3D = 0x8B5F;
enum GL_SAMPLER_2D_SHADOW = 0x8B62;
enum GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum GL_PIXEL_PACK_BUFFER = 0x88EB;
enum GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum GL_FLOAT_MAT2x3 = 0x8B65;
enum GL_FLOAT_MAT2x4 = 0x8B66;
enum GL_FLOAT_MAT3x2 = 0x8B67;
enum GL_FLOAT_MAT3x4 = 0x8B68;
enum GL_FLOAT_MAT4x2 = 0x8B69;
enum GL_FLOAT_MAT4x3 = 0x8B6A;
enum GL_SRGB = 0x8C40;
enum GL_SRGB8 = 0x8C41;
enum GL_SRGB8_ALPHA8 = 0x8C43;
enum GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum GL_MAJOR_VERSION = 0x821B;
enum GL_MINOR_VERSION = 0x821C;
enum GL_NUM_EXTENSIONS = 0x821D;
enum GL_RGBA32F = 0x8814;
enum GL_RGB32F = 0x8815;
enum GL_RGBA16F = 0x881A;
enum GL_RGB16F = 0x881B;
enum GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum GL_R11F_G11F_B10F = 0x8C3A;
enum GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum GL_RGB9_E5 = 0x8C3D;
enum GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum GL_RASTERIZER_DISCARD = 0x8C89;
enum GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum GL_SEPARATE_ATTRIBS = 0x8C8D;
enum GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum GL_RGBA32UI = 0x8D70;
enum GL_RGB32UI = 0x8D71;
enum GL_RGBA16UI = 0x8D76;
enum GL_RGB16UI = 0x8D77;
enum GL_RGBA8UI = 0x8D7C;
enum GL_RGB8UI = 0x8D7D;
enum GL_RGBA32I = 0x8D82;
enum GL_RGB32I = 0x8D83;
enum GL_RGBA16I = 0x8D88;
enum GL_RGB16I = 0x8D89;
enum GL_RGBA8I = 0x8D8E;
enum GL_RGB8I = 0x8D8F;
enum GL_RED_INTEGER = 0x8D94;
enum GL_RGB_INTEGER = 0x8D98;
enum GL_RGBA_INTEGER = 0x8D99;
enum GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum GL_INT_SAMPLER_2D = 0x8DCA;
enum GL_INT_SAMPLER_3D = 0x8DCB;
enum GL_INT_SAMPLER_CUBE = 0x8DCC;
enum GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum GL_BUFFER_MAP_LENGTH = 0x9120;
enum GL_BUFFER_MAP_OFFSET = 0x9121;
enum GL_DEPTH_COMPONENT32F = 0x8CAC;
enum GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum GL_DEPTH_STENCIL = 0x84F9;
enum GL_UNSIGNED_INT_24_8 = 0x84FA;
enum GL_DEPTH24_STENCIL8 = 0x88F0;
enum GL_UNSIGNED_NORMALIZED = 0x8C17;
enum GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum GL_READ_FRAMEBUFFER = 0x8CA8;
enum GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum GL_COLOR_ATTACHMENT13 = 0x8CED;
enum GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum GL_COLOR_ATTACHMENT16 = 0x8CF0;
enum GL_COLOR_ATTACHMENT17 = 0x8CF1;
enum GL_COLOR_ATTACHMENT18 = 0x8CF2;
enum GL_COLOR_ATTACHMENT19 = 0x8CF3;
enum GL_COLOR_ATTACHMENT20 = 0x8CF4;
enum GL_COLOR_ATTACHMENT21 = 0x8CF5;
enum GL_COLOR_ATTACHMENT22 = 0x8CF6;
enum GL_COLOR_ATTACHMENT23 = 0x8CF7;
enum GL_COLOR_ATTACHMENT24 = 0x8CF8;
enum GL_COLOR_ATTACHMENT25 = 0x8CF9;
enum GL_COLOR_ATTACHMENT26 = 0x8CFA;
enum GL_COLOR_ATTACHMENT27 = 0x8CFB;
enum GL_COLOR_ATTACHMENT28 = 0x8CFC;
enum GL_COLOR_ATTACHMENT29 = 0x8CFD;
enum GL_COLOR_ATTACHMENT30 = 0x8CFE;
enum GL_COLOR_ATTACHMENT31 = 0x8CFF;
enum GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum GL_MAX_SAMPLES = 0x8D57;
enum GL_HALF_FLOAT = 0x140B;
enum GL_MAP_READ_BIT = 0x0001;
enum GL_MAP_WRITE_BIT = 0x0002;
enum GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum GL_RG = 0x8227;
enum GL_RG_INTEGER = 0x8228;
enum GL_R8 = 0x8229;
enum GL_RG8 = 0x822B;
enum GL_R16F = 0x822D;
enum GL_R32F = 0x822E;
enum GL_RG16F = 0x822F;
enum GL_RG32F = 0x8230;
enum GL_R8I = 0x8231;
enum GL_R8UI = 0x8232;
enum GL_R16I = 0x8233;
enum GL_R16UI = 0x8234;
enum GL_R32I = 0x8235;
enum GL_R32UI = 0x8236;
enum GL_RG8I = 0x8237;
enum GL_RG8UI = 0x8238;
enum GL_RG16I = 0x8239;
enum GL_RG16UI = 0x823A;
enum GL_RG32I = 0x823B;
enum GL_RG32UI = 0x823C;
enum GL_VERTEX_ARRAY_BINDING = 0x85B5;
enum GL_R8_SNORM = 0x8F94;
enum GL_RG8_SNORM = 0x8F95;
enum GL_RGB8_SNORM = 0x8F96;
enum GL_RGBA8_SNORM = 0x8F97;
enum GL_SIGNED_NORMALIZED = 0x8F9C;
enum GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
enum GL_COPY_READ_BUFFER = 0x8F36;
enum GL_COPY_WRITE_BUFFER = 0x8F37;
enum GL_COPY_READ_BUFFER_BINDING = 0x8F36;
enum GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
enum GL_UNIFORM_BUFFER = 0x8A11;
enum GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum GL_UNIFORM_BUFFER_START = 0x8A29;
enum GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum GL_UNIFORM_TYPE = 0x8A37;
enum GL_UNIFORM_SIZE = 0x8A38;
enum GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum GL_UNIFORM_OFFSET = 0x8A3B;
enum GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum GL_INVALID_INDEX = 0xFFFFFFFFu;
enum GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum GL_OBJECT_TYPE = 0x9112;
enum GL_SYNC_CONDITION = 0x9113;
enum GL_SYNC_STATUS = 0x9114;
enum GL_SYNC_FLAGS = 0x9115;
enum GL_SYNC_FENCE = 0x9116;
enum GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum GL_UNSIGNALED = 0x9118;
enum GL_SIGNALED = 0x9119;
enum GL_ALREADY_SIGNALED = 0x911A;
enum GL_TIMEOUT_EXPIRED = 0x911B;
enum GL_CONDITION_SATISFIED = 0x911C;
enum GL_WAIT_FAILED = 0x911D;
enum GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFuL;
enum GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
enum GL_ANY_SAMPLES_PASSED = 0x8C2F;
enum GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
enum GL_SAMPLER_BINDING = 0x8919;
enum GL_RGB10_A2UI = 0x906F;
enum GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum GL_GREEN = 0x1904;
enum GL_BLUE = 0x1905;
enum GL_INT_2_10_10_10_REV = 0x8D9F;
enum GL_TRANSFORM_FEEDBACK = 0x8E22;
enum GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
enum GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
enum GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
enum GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
enum GL_PROGRAM_BINARY_LENGTH = 0x8741;
enum GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
enum GL_PROGRAM_BINARY_FORMATS = 0x87FF;
enum GL_COMPRESSED_R11_EAC = 0x9270;
enum GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
enum GL_COMPRESSED_RG11_EAC = 0x9272;
enum GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
enum GL_COMPRESSED_RGB8_ETC2 = 0x9274;
enum GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
enum GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
enum GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
enum GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
enum GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
enum GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
enum GL_MAX_ELEMENT_INDEX = 0x8D6B;
enum GL_NUM_SAMPLE_COUNTS = 0x9380;
enum GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
alias PFNGLREADBUFFERPROC = void function (GLenum src);
alias PFNGLDRAWRANGEELEMENTSPROC = void function (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices);
alias PFNGLTEXIMAGE3DPROC = void function (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels);
alias PFNGLTEXSUBIMAGE3DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels);
alias PFNGLCOPYTEXSUBIMAGE3DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
alias PFNGLCOMPRESSEDTEXIMAGE3DPROC = void function (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data);
alias PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = void function (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data);
alias PFNGLGENQUERIESPROC = void function (GLsizei n, GLuint* ids);
alias PFNGLDELETEQUERIESPROC = void function (GLsizei n, const(GLuint)* ids);
alias PFNGLISQUERYPROC = ubyte function (GLuint id);
alias PFNGLBEGINQUERYPROC = void function (GLenum target, GLuint id);
alias PFNGLENDQUERYPROC = void function (GLenum target);
alias PFNGLGETQUERYIVPROC = void function (GLenum target, GLenum pname, GLint* params);
alias PFNGLGETQUERYOBJECTUIVPROC = void function (GLuint id, GLenum pname, GLuint* params);
alias PFNGLUNMAPBUFFERPROC = ubyte function (GLenum target);
alias PFNGLGETBUFFERPOINTERVPROC = void function (GLenum target, GLenum pname, void** params);
alias PFNGLDRAWBUFFERSPROC = void function (GLsizei n, const(GLenum)* bufs);
alias PFNGLUNIFORMMATRIX2X3FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX3X2FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX2X4FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX4X2FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX3X4FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLUNIFORMMATRIX4X3FVPROC = void function (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLBLITFRAMEBUFFERPROC = void function (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
alias PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = void function (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
alias PFNGLFRAMEBUFFERTEXTURELAYERPROC = void function (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
alias PFNGLMAPBUFFERRANGEPROC = void* function (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
alias PFNGLFLUSHMAPPEDBUFFERRANGEPROC = void function (GLenum target, GLintptr offset, GLsizeiptr length);
alias PFNGLBINDVERTEXARRAYPROC = void function (GLuint array);
alias PFNGLDELETEVERTEXARRAYSPROC = void function (GLsizei n, const(GLuint)* arrays);
alias PFNGLGENVERTEXARRAYSPROC = void function (GLsizei n, GLuint* arrays);
alias PFNGLISVERTEXARRAYPROC = ubyte function (GLuint array);
alias PFNGLGETINTEGERI_VPROC = void function (GLenum target, GLuint index, GLint* data);
alias PFNGLBEGINTRANSFORMFEEDBACKPROC = void function (GLenum primitiveMode);
alias PFNGLENDTRANSFORMFEEDBACKPROC = void function ();
alias PFNGLBINDBUFFERRANGEPROC = void function (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
alias PFNGLBINDBUFFERBASEPROC = void function (GLenum target, GLuint index, GLuint buffer);
alias PFNGLTRANSFORMFEEDBACKVARYINGSPROC = void function (GLuint program, GLsizei count, const(GLchar*)* varyings, GLenum bufferMode);
alias PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = void function (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
alias PFNGLVERTEXATTRIBIPOINTERPROC = void function (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer);
alias PFNGLGETVERTEXATTRIBIIVPROC = void function (GLuint index, GLenum pname, GLint* params);
alias PFNGLGETVERTEXATTRIBIUIVPROC = void function (GLuint index, GLenum pname, GLuint* params);
alias PFNGLVERTEXATTRIBI4IPROC = void function (GLuint index, GLint x, GLint y, GLint z, GLint w);
alias PFNGLVERTEXATTRIBI4UIPROC = void function (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
alias PFNGLVERTEXATTRIBI4IVPROC = void function (GLuint index, const(GLint)* v);
alias PFNGLVERTEXATTRIBI4UIVPROC = void function (GLuint index, const(GLuint)* v);
alias PFNGLGETUNIFORMUIVPROC = void function (GLuint program, GLint location, GLuint* params);
alias PFNGLGETFRAGDATALOCATIONPROC = int function (GLuint program, const(GLchar)* name);
alias PFNGLUNIFORM1UIPROC = void function (GLint location, GLuint v0);
alias PFNGLUNIFORM2UIPROC = void function (GLint location, GLuint v0, GLuint v1);
alias PFNGLUNIFORM3UIPROC = void function (GLint location, GLuint v0, GLuint v1, GLuint v2);
alias PFNGLUNIFORM4UIPROC = void function (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
alias PFNGLUNIFORM1UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLUNIFORM2UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLUNIFORM3UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLUNIFORM4UIVPROC = void function (GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLCLEARBUFFERIVPROC = void function (GLenum buffer, GLint drawbuffer, const(GLint)* value);
alias PFNGLCLEARBUFFERUIVPROC = void function (GLenum buffer, GLint drawbuffer, const(GLuint)* value);
alias PFNGLCLEARBUFFERFVPROC = void function (GLenum buffer, GLint drawbuffer, const(GLfloat)* value);
alias PFNGLCLEARBUFFERFIPROC = void function (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
alias PFNGLGETSTRINGIPROC = const(ubyte)* function (GLenum name, GLuint index);
alias PFNGLCOPYBUFFERSUBDATAPROC = void function (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
alias PFNGLGETUNIFORMINDICESPROC = void function (GLuint program, GLsizei uniformCount, const(GLchar*)* uniformNames, GLuint* uniformIndices);
alias PFNGLGETACTIVEUNIFORMSIVPROC = void function (GLuint program, GLsizei uniformCount, const(GLuint)* uniformIndices, GLenum pname, GLint* params);
alias PFNGLGETUNIFORMBLOCKINDEXPROC = uint function (GLuint program, const(GLchar)* uniformBlockName);
alias PFNGLGETACTIVEUNIFORMBLOCKIVPROC = void function (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
alias PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = void function (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
alias PFNGLUNIFORMBLOCKBINDINGPROC = void function (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
alias PFNGLDRAWARRAYSINSTANCEDPROC = void function (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
alias PFNGLDRAWELEMENTSINSTANCEDPROC = void function (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount);
alias PFNGLFENCESYNCPROC = __GLsync* function (GLenum condition, GLbitfield flags);
alias PFNGLISSYNCPROC = ubyte function (GLsync sync);
alias PFNGLDELETESYNCPROC = void function (GLsync sync);
alias PFNGLCLIENTWAITSYNCPROC = uint function (GLsync sync, GLbitfield flags, GLuint64 timeout);
alias PFNGLWAITSYNCPROC = void function (GLsync sync, GLbitfield flags, GLuint64 timeout);
alias PFNGLGETINTEGER64VPROC = void function (GLenum pname, GLint64* data);
alias PFNGLGETSYNCIVPROC = void function (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
alias PFNGLGETINTEGER64I_VPROC = void function (GLenum target, GLuint index, GLint64* data);
alias PFNGLGETBUFFERPARAMETERI64VPROC = void function (GLenum target, GLenum pname, GLint64* params);
alias PFNGLGENSAMPLERSPROC = void function (GLsizei count, GLuint* samplers);
alias PFNGLDELETESAMPLERSPROC = void function (GLsizei count, const(GLuint)* samplers);
alias PFNGLISSAMPLERPROC = ubyte function (GLuint sampler);
alias PFNGLBINDSAMPLERPROC = void function (GLuint unit, GLuint sampler);
alias PFNGLSAMPLERPARAMETERIPROC = void function (GLuint sampler, GLenum pname, GLint param);
alias PFNGLSAMPLERPARAMETERIVPROC = void function (GLuint sampler, GLenum pname, const(GLint)* param);
alias PFNGLSAMPLERPARAMETERFPROC = void function (GLuint sampler, GLenum pname, GLfloat param);
alias PFNGLSAMPLERPARAMETERFVPROC = void function (GLuint sampler, GLenum pname, const(GLfloat)* param);
alias PFNGLGETSAMPLERPARAMETERIVPROC = void function (GLuint sampler, GLenum pname, GLint* params);
alias PFNGLGETSAMPLERPARAMETERFVPROC = void function (GLuint sampler, GLenum pname, GLfloat* params);
alias PFNGLVERTEXATTRIBDIVISORPROC = void function (GLuint index, GLuint divisor);
alias PFNGLBINDTRANSFORMFEEDBACKPROC = void function (GLenum target, GLuint id);
alias PFNGLDELETETRANSFORMFEEDBACKSPROC = void function (GLsizei n, const(GLuint)* ids);
alias PFNGLGENTRANSFORMFEEDBACKSPROC = void function (GLsizei n, GLuint* ids);
alias PFNGLISTRANSFORMFEEDBACKPROC = ubyte function (GLuint id);
alias PFNGLPAUSETRANSFORMFEEDBACKPROC = void function ();
alias PFNGLRESUMETRANSFORMFEEDBACKPROC = void function ();
alias PFNGLGETPROGRAMBINARYPROC = void function (GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
alias PFNGLPROGRAMBINARYPROC = void function (GLuint program, GLenum binaryFormat, const(void)* binary, GLsizei length);
alias PFNGLPROGRAMPARAMETERIPROC = void function (GLuint program, GLenum pname, GLint value);
alias PFNGLINVALIDATEFRAMEBUFFERPROC = void function (GLenum target, GLsizei numAttachments, const(GLenum)* attachments);
alias PFNGLINVALIDATESUBFRAMEBUFFERPROC = void function (GLenum target, GLsizei numAttachments, const(GLenum)* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
alias PFNGLTEXSTORAGE2DPROC = void function (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
alias PFNGLTEXSTORAGE3DPROC = void function (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
alias PFNGLGETINTERNALFORMATIVPROC = void function (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
void glReadBuffer (GLenum src);
void glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(void)* indices);
void glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(void)* pixels);
void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(void)* pixels);
void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(void)* data);
void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(void)* data);
void glGenQueries (GLsizei n, GLuint* ids);
void glDeleteQueries (GLsizei n, const(GLuint)* ids);
GLboolean glIsQuery (GLuint id);
void glBeginQuery (GLenum target, GLuint id);
void glEndQuery (GLenum target);
void glGetQueryiv (GLenum target, GLenum pname, GLint* params);
void glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint* params);
GLboolean glUnmapBuffer (GLenum target);
void glGetBufferPointerv (GLenum target, GLenum pname, void** params);
void glDrawBuffers (GLsizei n, const(GLenum)* bufs);
void glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void* glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
void glBindVertexArray (GLuint array);
void glDeleteVertexArrays (GLsizei n, const(GLuint)* arrays);
void glGenVertexArrays (GLsizei n, GLuint* arrays);
GLboolean glIsVertexArray (GLuint array);
void glGetIntegeri_v (GLenum target, GLuint index, GLint* data);
void glBeginTransformFeedback (GLenum primitiveMode);
void glEndTransformFeedback ();
void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
void glTransformFeedbackVaryings (GLuint program, GLsizei count, const(GLchar*)* varyings, GLenum bufferMode);
void glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
void glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const(void)* pointer);
void glGetVertexAttribIiv (GLuint index, GLenum pname, GLint* params);
void glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint* params);
void glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
void glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glVertexAttribI4iv (GLuint index, const(GLint)* v);
void glVertexAttribI4uiv (GLuint index, const(GLuint)* v);
void glGetUniformuiv (GLuint program, GLint location, GLuint* params);
GLint glGetFragDataLocation (GLuint program, const(GLchar)* name);
void glUniform1ui (GLint location, GLuint v0);
void glUniform2ui (GLint location, GLuint v0, GLuint v1);
void glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform1uiv (GLint location, GLsizei count, const(GLuint)* value);
void glUniform2uiv (GLint location, GLsizei count, const(GLuint)* value);
void glUniform3uiv (GLint location, GLsizei count, const(GLuint)* value);
void glUniform4uiv (GLint location, GLsizei count, const(GLuint)* value);
void glClearBufferiv (GLenum buffer, GLint drawbuffer, const(GLint)* value);
void glClearBufferuiv (GLenum buffer, GLint drawbuffer, const(GLuint)* value);
void glClearBufferfv (GLenum buffer, GLint drawbuffer, const(GLfloat)* value);
void glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
const(GLubyte)* glGetStringi (GLenum name, GLuint index);
void glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void glGetUniformIndices (GLuint program, GLsizei uniformCount, const(GLchar*)* uniformNames, GLuint* uniformIndices);
void glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const(GLuint)* uniformIndices, GLenum pname, GLint* params);
GLuint glGetUniformBlockIndex (GLuint program, const(GLchar)* uniformBlockName);
void glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
void glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
void glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const(void)* indices, GLsizei instancecount);
GLsync glFenceSync (GLenum condition, GLbitfield flags);
GLboolean glIsSync (GLsync sync);
void glDeleteSync (GLsync sync);
GLenum glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
void glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
void glGetInteger64v (GLenum pname, GLint64* data);
void glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
void glGetInteger64i_v (GLenum target, GLuint index, GLint64* data);
void glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64* params);
void glGenSamplers (GLsizei count, GLuint* samplers);
void glDeleteSamplers (GLsizei count, const(GLuint)* samplers);
GLboolean glIsSampler (GLuint sampler);
void glBindSampler (GLuint unit, GLuint sampler);
void glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
void glSamplerParameteriv (GLuint sampler, GLenum pname, const(GLint)* param);
void glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
void glSamplerParameterfv (GLuint sampler, GLenum pname, const(GLfloat)* param);
void glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint* params);
void glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat* params);
void glVertexAttribDivisor (GLuint index, GLuint divisor);
void glBindTransformFeedback (GLenum target, GLuint id);
void glDeleteTransformFeedbacks (GLsizei n, const(GLuint)* ids);
void glGenTransformFeedbacks (GLsizei n, GLuint* ids);
GLboolean glIsTransformFeedback (GLuint id);
void glPauseTransformFeedback ();
void glResumeTransformFeedback ();
void glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
void glProgramBinary (GLuint program, GLenum binaryFormat, const(void)* binary, GLsizei length);
void glProgramParameteri (GLuint program, GLenum pname, GLint value);
void glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const(GLenum)* attachments);
void glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const(GLenum)* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);

/* GL_ES_VERSION_3_0 */

enum GL_ES_VERSION_3_1 = 1;
enum GL_COMPUTE_SHADER = 0x91B9;
enum GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
enum GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
enum GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
enum GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
enum GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
enum GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
enum GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
enum GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
enum GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
enum GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
enum GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
enum GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
enum GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
enum GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
enum GL_COMPUTE_SHADER_BIT = 0x00000020;
enum GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
enum GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
enum GL_MAX_UNIFORM_LOCATIONS = 0x826E;
enum GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
enum GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
enum GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
enum GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
enum GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
enum GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
enum GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
enum GL_UNIFORM = 0x92E1;
enum GL_UNIFORM_BLOCK = 0x92E2;
enum GL_PROGRAM_INPUT = 0x92E3;
enum GL_PROGRAM_OUTPUT = 0x92E4;
enum GL_BUFFER_VARIABLE = 0x92E5;
enum GL_SHADER_STORAGE_BLOCK = 0x92E6;
enum GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
enum GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
enum GL_ACTIVE_RESOURCES = 0x92F5;
enum GL_MAX_NAME_LENGTH = 0x92F6;
enum GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
enum GL_NAME_LENGTH = 0x92F9;
enum GL_TYPE = 0x92FA;
enum GL_ARRAY_SIZE = 0x92FB;
enum GL_OFFSET = 0x92FC;
enum GL_BLOCK_INDEX = 0x92FD;
enum GL_ARRAY_STRIDE = 0x92FE;
enum GL_MATRIX_STRIDE = 0x92FF;
enum GL_IS_ROW_MAJOR = 0x9300;
enum GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
enum GL_BUFFER_BINDING = 0x9302;
enum GL_BUFFER_DATA_SIZE = 0x9303;
enum GL_NUM_ACTIVE_VARIABLES = 0x9304;
enum GL_ACTIVE_VARIABLES = 0x9305;
enum GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
enum GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
enum GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
enum GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
enum GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
enum GL_LOCATION = 0x930E;
enum GL_VERTEX_SHADER_BIT = 0x00000001;
enum GL_FRAGMENT_SHADER_BIT = 0x00000002;
enum GL_ALL_SHADER_BITS = 0xFFFFFFFF;
enum GL_PROGRAM_SEPARABLE = 0x8258;
enum GL_ACTIVE_PROGRAM = 0x8259;
enum GL_PROGRAM_PIPELINE_BINDING = 0x825A;
enum GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
enum GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
enum GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
enum GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
enum GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
enum GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
enum GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
enum GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
enum GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
enum GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
enum GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
enum GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
enum GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
enum GL_MAX_IMAGE_UNITS = 0x8F38;
enum GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
enum GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
enum GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
enum GL_IMAGE_BINDING_NAME = 0x8F3A;
enum GL_IMAGE_BINDING_LEVEL = 0x8F3B;
enum GL_IMAGE_BINDING_LAYERED = 0x8F3C;
enum GL_IMAGE_BINDING_LAYER = 0x8F3D;
enum GL_IMAGE_BINDING_ACCESS = 0x8F3E;
enum GL_IMAGE_BINDING_FORMAT = 0x906E;
enum GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
enum GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
enum GL_UNIFORM_BARRIER_BIT = 0x00000004;
enum GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
enum GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
enum GL_COMMAND_BARRIER_BIT = 0x00000040;
enum GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
enum GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
enum GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
enum GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
enum GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
enum GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
enum GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
enum GL_IMAGE_2D = 0x904D;
enum GL_IMAGE_3D = 0x904E;
enum GL_IMAGE_CUBE = 0x9050;
enum GL_IMAGE_2D_ARRAY = 0x9053;
enum GL_INT_IMAGE_2D = 0x9058;
enum GL_INT_IMAGE_3D = 0x9059;
enum GL_INT_IMAGE_CUBE = 0x905B;
enum GL_INT_IMAGE_2D_ARRAY = 0x905E;
enum GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
enum GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
enum GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
enum GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
enum GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
enum GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
enum GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
enum GL_READ_ONLY = 0x88B8;
enum GL_WRITE_ONLY = 0x88B9;
enum GL_READ_WRITE = 0x88BA;
enum GL_SHADER_STORAGE_BUFFER = 0x90D2;
enum GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
enum GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
enum GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
enum GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
enum GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
enum GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
enum GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
enum GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
enum GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
enum GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
enum GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
enum GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
enum GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
enum GL_STENCIL_INDEX = 0x1901;
enum GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
enum GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
enum GL_SAMPLE_POSITION = 0x8E50;
enum GL_SAMPLE_MASK = 0x8E51;
enum GL_SAMPLE_MASK_VALUE = 0x8E52;
enum GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum GL_MAX_INTEGER_SAMPLES = 0x9110;
enum GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum GL_TEXTURE_SAMPLES = 0x9106;
enum GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum GL_TEXTURE_WIDTH = 0x1000;
enum GL_TEXTURE_HEIGHT = 0x1001;
enum GL_TEXTURE_DEPTH = 0x8071;
enum GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum GL_TEXTURE_RED_SIZE = 0x805C;
enum GL_TEXTURE_GREEN_SIZE = 0x805D;
enum GL_TEXTURE_BLUE_SIZE = 0x805E;
enum GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum GL_TEXTURE_RED_TYPE = 0x8C10;
enum GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum GL_TEXTURE_COMPRESSED = 0x86A1;
enum GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum GL_VERTEX_ATTRIB_BINDING = 0x82D4;
enum GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
enum GL_VERTEX_BINDING_DIVISOR = 0x82D6;
enum GL_VERTEX_BINDING_OFFSET = 0x82D7;
enum GL_VERTEX_BINDING_STRIDE = 0x82D8;
enum GL_VERTEX_BINDING_BUFFER = 0x8F4F;
enum GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
enum GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
enum GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
alias PFNGLDISPATCHCOMPUTEPROC = void function (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
alias PFNGLDISPATCHCOMPUTEINDIRECTPROC = void function (GLintptr indirect);
alias PFNGLDRAWARRAYSINDIRECTPROC = void function (GLenum mode, const(void)* indirect);
alias PFNGLDRAWELEMENTSINDIRECTPROC = void function (GLenum mode, GLenum type, const(void)* indirect);
alias PFNGLFRAMEBUFFERPARAMETERIPROC = void function (GLenum target, GLenum pname, GLint param);
alias PFNGLGETFRAMEBUFFERPARAMETERIVPROC = void function (GLenum target, GLenum pname, GLint* params);
alias PFNGLGETPROGRAMINTERFACEIVPROC = void function (GLuint program, GLenum programInterface, GLenum pname, GLint* params);
alias PFNGLGETPROGRAMRESOURCEINDEXPROC = uint function (GLuint program, GLenum programInterface, const(GLchar)* name);
alias PFNGLGETPROGRAMRESOURCENAMEPROC = void function (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
alias PFNGLGETPROGRAMRESOURCEIVPROC = void function (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const(GLenum)* props, GLsizei bufSize, GLsizei* length, GLint* params);
alias PFNGLGETPROGRAMRESOURCELOCATIONPROC = int function (GLuint program, GLenum programInterface, const(GLchar)* name);
alias PFNGLUSEPROGRAMSTAGESPROC = void function (GLuint pipeline, GLbitfield stages, GLuint program);
alias PFNGLACTIVESHADERPROGRAMPROC = void function (GLuint pipeline, GLuint program);
alias PFNGLCREATESHADERPROGRAMVPROC = uint function (GLenum type, GLsizei count, const(GLchar*)* strings);
alias PFNGLBINDPROGRAMPIPELINEPROC = void function (GLuint pipeline);
alias PFNGLDELETEPROGRAMPIPELINESPROC = void function (GLsizei n, const(GLuint)* pipelines);
alias PFNGLGENPROGRAMPIPELINESPROC = void function (GLsizei n, GLuint* pipelines);
alias PFNGLISPROGRAMPIPELINEPROC = ubyte function (GLuint pipeline);
alias PFNGLGETPROGRAMPIPELINEIVPROC = void function (GLuint pipeline, GLenum pname, GLint* params);
alias PFNGLPROGRAMUNIFORM1IPROC = void function (GLuint program, GLint location, GLint v0);
alias PFNGLPROGRAMUNIFORM2IPROC = void function (GLuint program, GLint location, GLint v0, GLint v1);
alias PFNGLPROGRAMUNIFORM3IPROC = void function (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
alias PFNGLPROGRAMUNIFORM4IPROC = void function (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
alias PFNGLPROGRAMUNIFORM1UIPROC = void function (GLuint program, GLint location, GLuint v0);
alias PFNGLPROGRAMUNIFORM2UIPROC = void function (GLuint program, GLint location, GLuint v0, GLuint v1);
alias PFNGLPROGRAMUNIFORM3UIPROC = void function (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
alias PFNGLPROGRAMUNIFORM4UIPROC = void function (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
alias PFNGLPROGRAMUNIFORM1FPROC = void function (GLuint program, GLint location, GLfloat v0);
alias PFNGLPROGRAMUNIFORM2FPROC = void function (GLuint program, GLint location, GLfloat v0, GLfloat v1);
alias PFNGLPROGRAMUNIFORM3FPROC = void function (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
alias PFNGLPROGRAMUNIFORM4FPROC = void function (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
alias PFNGLPROGRAMUNIFORM1IVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLint)* value);
alias PFNGLPROGRAMUNIFORM2IVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLint)* value);
alias PFNGLPROGRAMUNIFORM3IVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLint)* value);
alias PFNGLPROGRAMUNIFORM4IVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLint)* value);
alias PFNGLPROGRAMUNIFORM1UIVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLPROGRAMUNIFORM2UIVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLPROGRAMUNIFORM3UIVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLPROGRAMUNIFORM4UIVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
alias PFNGLPROGRAMUNIFORM1FVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORM2FVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORM3FVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORM4FVPROC = void function (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX2FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX3FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX4FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = void function (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
alias PFNGLVALIDATEPROGRAMPIPELINEPROC = void function (GLuint pipeline);
alias PFNGLGETPROGRAMPIPELINEINFOLOGPROC = void function (GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
alias PFNGLBINDIMAGETEXTUREPROC = void function (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
alias PFNGLGETBOOLEANI_VPROC = void function (GLenum target, GLuint index, GLboolean* data);
alias PFNGLMEMORYBARRIERPROC = void function (GLbitfield barriers);
alias PFNGLMEMORYBARRIERBYREGIONPROC = void function (GLbitfield barriers);
alias PFNGLTEXSTORAGE2DMULTISAMPLEPROC = void function (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
alias PFNGLGETMULTISAMPLEFVPROC = void function (GLenum pname, GLuint index, GLfloat* val);
alias PFNGLSAMPLEMASKIPROC = void function (GLuint maskNumber, GLbitfield mask);
alias PFNGLGETTEXLEVELPARAMETERIVPROC = void function (GLenum target, GLint level, GLenum pname, GLint* params);
alias PFNGLGETTEXLEVELPARAMETERFVPROC = void function (GLenum target, GLint level, GLenum pname, GLfloat* params);
alias PFNGLBINDVERTEXBUFFERPROC = void function (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
alias PFNGLVERTEXATTRIBFORMATPROC = void function (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
alias PFNGLVERTEXATTRIBIFORMATPROC = void function (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
alias PFNGLVERTEXATTRIBBINDINGPROC = void function (GLuint attribindex, GLuint bindingindex);
alias PFNGLVERTEXBINDINGDIVISORPROC = void function (GLuint bindingindex, GLuint divisor);
void glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void glDispatchComputeIndirect (GLintptr indirect);
void glDrawArraysIndirect (GLenum mode, const(void)* indirect);
void glDrawElementsIndirect (GLenum mode, GLenum type, const(void)* indirect);
void glFramebufferParameteri (GLenum target, GLenum pname, GLint param);
void glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint* params);
void glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint* params);
GLuint glGetProgramResourceIndex (GLuint program, GLenum programInterface, const(GLchar)* name);
void glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
void glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const(GLenum)* props, GLsizei bufSize, GLsizei* length, GLint* params);
GLint glGetProgramResourceLocation (GLuint program, GLenum programInterface, const(GLchar)* name);
void glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
void glActiveShaderProgram (GLuint pipeline, GLuint program);
GLuint glCreateShaderProgramv (GLenum type, GLsizei count, const(GLchar*)* strings);
void glBindProgramPipeline (GLuint pipeline);
void glDeleteProgramPipelines (GLsizei n, const(GLuint)* pipelines);
void glGenProgramPipelines (GLsizei n, GLuint* pipelines);
GLboolean glIsProgramPipeline (GLuint pipeline);
void glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint* params);
void glProgramUniform1i (GLuint program, GLint location, GLint v0);
void glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
void glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
void glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
void glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
void glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
void glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const(GLint)* value);
void glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const(GLint)* value);
void glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const(GLint)* value);
void glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const(GLint)* value);
void glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
void glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
void glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
void glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const(GLuint)* value);
void glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
void glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
void glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
void glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const(GLfloat)* value);
void glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value);
void glValidateProgramPipeline (GLuint pipeline);
void glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void glGetBooleani_v (GLenum target, GLuint index, GLboolean* data);
void glMemoryBarrier (GLbitfield barriers);
void glMemoryBarrierByRegion (GLbitfield barriers);
void glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glGetMultisamplefv (GLenum pname, GLuint index, GLfloat* val);
void glSampleMaski (GLuint maskNumber, GLbitfield mask);
void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint* params);
void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat* params);
void glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);
void glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);

/* GL_ES_VERSION_3_1 */

