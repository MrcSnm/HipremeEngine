// D import file generated from 'source\hip\util\windows.d'
module hip.util.windows;
version (Windows)
{
	import core.stdc.stdarg;
	nothrow @nogc extern (Windows) 
	{
		void* GetModuleHandleA(const(char)* str);
		void* GetModuleHandleW(const(wchar)* str);
		void* GetProcAddress(void* mod, const(char)* func);
		void* LoadLibraryA(const char* fileName);
		BOOL FreeLibrary(void* lib);
		uint GetLastError();
		DWORD FormatMessageW(DWORD, PCVOID, DWORD, DWORD, LPWSTR, DWORD, va_list*);
		int SetEndOfFile(void* handle);
		alias GetModuleHandle = GetModuleHandleW;
		alias FormatMessage = FormatMessageW;
		HLOCAL LocalAlloc(UINT, SIZE_T);
		HLOCAL LocalDiscard(HLOCAL);
		HLOCAL LocalFree(HLOCAL);
		HLOCAL LocalHandle(LPCVOID);
	}
	enum DWORD FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;
	enum DWORD FORMAT_MESSAGE_IGNORE_INSERTS = 512;
	enum DWORD FORMAT_MESSAGE_FROM_STRING = 1024;
	enum DWORD FORMAT_MESSAGE_FROM_HMODULE = 2048;
	enum DWORD FORMAT_MESSAGE_FROM_SYSTEM = 4096;
	enum DWORD FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;
	enum DWORD FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;
	alias BYTE = ubyte;
	alias PBYTE = ubyte*;
	alias LPBYTE = ubyte*;
	alias USHORT = ushort;
	alias WORD = ushort;
	alias ATOM = ushort;
	alias PUSHORT = ushort*;
	alias PWORD = ushort*;
	alias LPWORD = ushort*;
	alias ULONG = uint;
	alias DWORD = uint;
	alias UINT = uint;
	alias COLORREF = uint;
	alias PULONG = uint*;
	alias PDWORD = uint*;
	alias LPDWORD = uint*;
	alias PUINT = uint*;
	alias LPUINT = uint*;
	alias LPCOLORREF = uint*;
	alias WINBOOL = int;
	alias BOOL = int;
	alias INT = int;
	alias LONG = int;
	alias HFILE = int;
	alias HRESULT = int;
	alias PWINBOOL = int*;
	alias LPWINBOOL = int*;
	alias PBOOL = int*;
	alias LPBOOL = int*;
	alias PINT = int*;
	alias LPINT = int*;
	alias LPLONG = int*;
	alias FLOAT = float;
	alias PFLOAT = float*;
	alias PCVOID = const(void)*;
	alias LPCVOID = const(void)*;
	alias PVOID = void*;
	alias LPVOID = void*;
	alias PSZ = char*;
	alias PCHAR = char*;
	alias PCCHAR = char*;
	alias LPCH = char*;
	alias PCH = char*;
	alias LPSTR = char*;
	alias PSTR = char*;
	alias PWCHAR = wchar*;
	alias LPWCH = wchar*;
	alias PWCH = wchar*;
	alias LPWSTR = wchar*;
	alias PWSTR = wchar*;
	alias PBOOLEAN = bool*;
	alias PUCHAR = ubyte*;
	alias PSHORT = short*;
	alias PLONG = int*;
	alias PLCID = uint*;
	alias PACCESS_MASK = uint*;
	alias PLONGLONG = long*;
	alias PDWORDLONG = ulong*;
	alias PULONGLONG = ulong*;
	alias HMODULE = void*;
	alias HLOCAL = void*;
	alias SIZE_T = ulong;
}
